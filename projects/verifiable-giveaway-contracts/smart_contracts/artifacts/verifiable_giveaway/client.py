# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "commit(uint8,uint8,uint8)void": {
            "call_config": {
                "no_op": "CALL",
                "opt_in": "CALL"
            }
        },
        "reveal()(byte[],uint8[])": {
            "call_config": {
                "close_out": "CALL",
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A2CiAgICBtZXRob2QgImNvbW1pdCh1aW50OCx1aW50OCx1aW50OCl2b2lkIgogICAgbWV0aG9kICJyZXZlYWwoKShieXRlW10sdWludDhbXSkiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NvbW1pdF9yb3V0ZUAyIG1haW5fcmV2ZWFsX3JvdXRlQDMKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fY29tbWl0X3JvdXRlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uTm9PcCwgT25Db21wbGV0ZUFjdGlvbi5PcHRJbl0pCiAgICBpbnQgMQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc2hsCiAgICBpbnQgMwogICAgJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBvbmUgb2YgTm9PcCwgT3B0SW4KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0NAogICAgLy8gY2xhc3MgVmVyaWZpYWJsZUdpdmVhd2F5KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uTm9PcCwgT25Db21wbGV0ZUFjdGlvbi5PcHRJbl0pCiAgICBjYWxsc3ViIGNvbW1pdAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9yZXZlYWxfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjgxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5Ob09wLCBPbkNvbXBsZXRlQWN0aW9uLkNsb3NlT3V0XSkKICAgIGludCAxCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBzaGwKICAgIGludCA1CiAgICAmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG9uZSBvZiBOb09wLCBDbG9zZU91dAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmV2ZWFsCiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgaW50IDQKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlIDB4MDAwNAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHN3aXRjaCBtYWluX2NyZWF0ZUA3IG1haW5fcmVqZWN0X2JhcmVfb25fY29tcGxldGlvbkAxMCBtYWluX3JlamVjdF9iYXJlX29uX2NvbXBsZXRpb25AMTAgbWFpbl9yZWplY3RfYmFyZV9vbl9jb21wbGV0aW9uQDEwIG1haW5fdXBkYXRlQDggbWFpbl9kZWxldGVAOQogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9jcmVhdGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0OAogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLlVwZGF0ZUFwcGxpY2F0aW9uXSkKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0OC00OQogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLlVwZGF0ZUFwcGxpY2F0aW9uXSkKICAgIC8vIGRlZiB1cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIGNhbGxzdWIgdXBkYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2RlbGV0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTIKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTItNTMKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICAvLyBkZWYgZGVsZXRlKHNlbGYpIC0+IE5vbmU6CiAgICBjYWxsc3ViIGRlbGV0ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9yZWplY3RfYmFyZV9vbl9jb21wbGV0aW9uQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NDQKICAgIC8vIGNsYXNzIFZlcmlmaWFibGVHaXZlYXdheShBUkM0Q29udHJhY3QpOgogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZXJpZmlhYmxlX2dpdmVhd2F5LmNvbnRyYWN0LlZlcmlmaWFibGVHaXZlYXdheS5jb21taXQoZGVsYXk6IGJ5dGVzLCBwYXJ0aWNpcGFudHM6IGJ5dGVzLCB3aW5uZXJzOiBieXRlcykgLT4gdm9pZDoKY29tbWl0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTYtNTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLk5vT3AsIE9uQ29tcGxldGVBY3Rpb24uT3B0SW5dKQogICAgLy8gZGVmIGNvbW1pdCgKICAgIC8vICAgICBzZWxmLCBkZWxheTogYXJjNC5VSW50OCwgcGFydGljaXBhbnRzOiBhcmM0LlVJbnQ4LCB3aW5uZXJzOiBhcmM0LlVJbnQ4CiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjYwCiAgICAvLyBhc3NlcnQgVGVtcGxhdGVWYXJbVUludDY0XSgiU0FGRVRZX1JPVU5EX0dBUCIpIDw9IGRlbGF5Lm5hdGl2ZQogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICBkdXAKICAgIGludCBUTVBMX1NBRkVUWV9ST1VORF9HQVAKICAgID49CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjYyCiAgICAvLyBhc3NlcnQgMSA8PSB3aW5uZXJzLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXBuIDIKICAgIGludCAxCiAgICA+PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2MwogICAgLy8gYXNzZXJ0IDIgPD0gcGFydGljaXBhbnRzLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGludCAyCiAgICA+PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2NS02NgogICAgLy8gIyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGNoZWNrIHRoYXQgcGFydGljaXBhbnRzIGlzIDw9IDI1NSBiZWNhdXNlIHBhcnRpY2lwYW50cyBpcyBhcmM0LlVJbnQ4CiAgICAvLyAod2lubmVycy5uYXRpdmUgPD0gMTYpCiAgICBpbnQgMTYKICAgIDw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2NS02OQogICAgLy8gIyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGNoZWNrIHRoYXQgcGFydGljaXBhbnRzIGlzIDw9IDI1NSBiZWNhdXNlIHBhcnRpY2lwYW50cyBpcyBhcmM0LlVJbnQ4CiAgICAvLyAod2lubmVycy5uYXRpdmUgPD0gMTYpCiAgICAvLyBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSA4MCBhbmQgd2lubmVycy5uYXRpdmUgPD0gMjApCiAgICAvLyBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSA0NyBhbmQgd2lubmVycy5uYXRpdmUgPD0gMjUpCiAgICAvLyBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSAzNSBhbmQgd2lubmVycy5uYXRpdmUgPD0gMzApCiAgICBibnogY29tbWl0X2Jvb2xfdHJ1ZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2NwogICAgLy8gb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gODAgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDIwKQogICAgZnJhbWVfZGlnIDIKICAgIGludCA4MAogICAgPD0KICAgIGJ6IGNvbW1pdF9vcl9jb250ZEAzCiAgICBmcmFtZV9kaWcgMQogICAgaW50IDIwCiAgICA8PQogICAgYm56IGNvbW1pdF9ib29sX3RydWVANwoKY29tbWl0X29yX2NvbnRkQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2OAogICAgLy8gb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gNDcgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDI1KQogICAgZnJhbWVfZGlnIDIKICAgIGludCA0NwogICAgPD0KICAgIGJ6IGNvbW1pdF9vcl9jb250ZEA1CiAgICBmcmFtZV9kaWcgMQogICAgaW50IDI1CiAgICA8PQogICAgYm56IGNvbW1pdF9ib29sX3RydWVANwoKY29tbWl0X29yX2NvbnRkQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2OQogICAgLy8gb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gMzUgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDMwKQogICAgZnJhbWVfZGlnIDIKICAgIGludCAzNQogICAgPD0KICAgIGJ6IGNvbW1pdF9ib29sX2ZhbHNlQDgKICAgIGZyYW1lX2RpZyAxCiAgICBpbnQgMzAKICAgIDw9CiAgICBieiBjb21taXRfYm9vbF9mYWxzZUA4Cgpjb21taXRfYm9vbF90cnVlQDc6CiAgICBpbnQgMQogICAgYiBjb21taXRfYm9vbF9tZXJnZUA5Cgpjb21taXRfYm9vbF9mYWxzZUA4OgogICAgaW50IDAKCmNvbW1pdF9ib29sX21lcmdlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2NC03MAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICAjIFdlIGRvbid0IG5lZWQgdG8gYWN0dWFsbHkgY2hlY2sgdGhhdCBwYXJ0aWNpcGFudHMgaXMgPD0gMjU1IGJlY2F1c2UgcGFydGljaXBhbnRzIGlzIGFyYzQuVUludDgKICAgIC8vICAgICAod2lubmVycy5uYXRpdmUgPD0gMTYpCiAgICAvLyAgICAgb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gODAgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDIwKQogICAgLy8gICAgIG9yIChwYXJ0aWNpcGFudHMubmF0aXZlIDw9IDQ3IGFuZCB3aW5uZXJzLm5hdGl2ZSA8PSAyNSkKICAgIC8vICAgICBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSAzNSBhbmQgd2lubmVycy5uYXRpdmUgPD0gMzApCiAgICAvLyApCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjcxCiAgICAvLyBhc3NlcnQgd2lubmVycy5uYXRpdmUgPD0gcGFydGljaXBhbnRzLm5hdGl2ZQogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAyCiAgICA8PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3NQogICAgLy8gVHhuLnR4X2lkCiAgICB0eG4gVHhJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NzYKICAgIC8vICsgb3AuaXRvYihHbG9iYWwucm91bmQgKyBkZWxheS5uYXRpdmUpCiAgICBnbG9iYWwgUm91bmQKICAgIGZyYW1lX2RpZyAwCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3NS03NgogICAgLy8gVHhuLnR4X2lkCiAgICAvLyArIG9wLml0b2IoR2xvYmFsLnJvdW5kICsgZGVsYXkubmF0aXZlKQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3NS03NwogICAgLy8gVHhuLnR4X2lkCiAgICAvLyArIG9wLml0b2IoR2xvYmFsLnJvdW5kICsgZGVsYXkubmF0aXZlKQogICAgLy8gKyBwYXJ0aWNpcGFudHMuYnl0ZXMKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3My03NAogICAgLy8gIyBGSVhNRTogSXQgd291bGQgYmUgYmVzdCB0byB1c2UgYSBzdHJ1Y3Qgc28gdGhhdCB3ZSBoYXZlIGVhc2llciBkZWNvZGluZyBvZmYtY2hhaW4uCiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdID0gKAogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NzUtNzgKICAgIC8vIFR4bi50eF9pZAogICAgLy8gKyBvcC5pdG9iKEdsb2JhbC5yb3VuZCArIGRlbGF5Lm5hdGl2ZSkKICAgIC8vICsgcGFydGljaXBhbnRzLmJ5dGVzCiAgICAvLyArIHdpbm5lcnMuYnl0ZXMKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0NgogICAgLy8gc2VsZi5hY3RpdmVfY29tbWl0bWVudCA9IExvY2FsU3RhdGUoQnl0ZXMpCiAgICBieXRlICJhY3RpdmVfY29tbWl0bWVudCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjczLTc5CiAgICAvLyAjIEZJWE1FOiBJdCB3b3VsZCBiZSBiZXN0IHRvIHVzZSBhIHN0cnVjdCBzbyB0aGF0IHdlIGhhdmUgZWFzaWVyIGRlY29kaW5nIG9mZi1jaGFpbi4KICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl0gPSAoCiAgICAvLyAgICAgVHhuLnR4X2lkCiAgICAvLyAgICAgKyBvcC5pdG9iKEdsb2JhbC5yb3VuZCArIGRlbGF5Lm5hdGl2ZSkKICAgIC8vICAgICArIHBhcnRpY2lwYW50cy5ieXRlcwogICAgLy8gICAgICsgd2lubmVycy5ieXRlcwogICAgLy8gKQogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlcmlmaWFibGVfZ2l2ZWF3YXkuY29udHJhY3QuVmVyaWZpYWJsZUdpdmVhd2F5LnJldmVhbCgpIC0+IGJ5dGVzLCBieXRlczoKcmV2ZWFsOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODEtODIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLk5vT3AsIE9uQ29tcGxldGVBY3Rpb24uQ2xvc2VPdXRdKQogICAgLy8gZGVmIHJldmVhbChzZWxmKSAtPiB0dXBsZVthcmM0LkR5bmFtaWNCeXRlcywgYXJjNC5EeW5hbWljQXJyYXlbYXJjNC5VSW50OF1dOgogICAgcHJvdG8gMCAyCiAgICBieXRlICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjgzCiAgICAvLyBjb21taXR0ZWRfdHhfaWQgPSBhcmM0LkR5bmFtaWNCeXRlcyhzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdWzA6MzJdKQogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50ID0gTG9jYWxTdGF0ZShCeXRlcykKICAgIGJ5dGUgImFjdGl2ZV9jb21taXRtZW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODMKICAgIC8vIGNvbW1pdHRlZF90eF9pZCA9IGFyYzQuRHluYW1pY0J5dGVzKHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bMDozMl0pCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY3RpdmVfY29tbWl0bWVudCBleGlzdHMgZm9yIGFjY291bnQKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMAogICAgZGlnIDEKICAgID49CiAgICBpbnQgMAogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBzd2FwCiAgICBpbnQgMzIKICAgIGRpZyAxCiAgICA+PQogICAgaW50IDMyCiAgICBjb3ZlciAyCiAgICBzZWxlY3QKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdWzMyOjQwXQogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50ID0gTG9jYWxTdGF0ZShCeXRlcykKICAgIGJ5dGUgImFjdGl2ZV9jb21taXRtZW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODUKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bMzI6NDBdCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY3RpdmVfY29tbWl0bWVudCBleGlzdHMgZm9yIGFjY291bnQKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMzIKICAgIGRpZyAxCiAgICA+PQogICAgaW50IDMyCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIHN3YXAKICAgIGludCA0MAogICAgZGlnIDEKICAgID49CiAgICBpbnQgNDAKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgc3Vic3RyaW5nMwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODgKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bNDA6NDFdCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NDYKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnQgPSBMb2NhbFN0YXRlKEJ5dGVzKQogICAgYnl0ZSAiYWN0aXZlX2NvbW1pdG1lbnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo4OAogICAgLy8gc2VsZi5hY3RpdmVfY29tbWl0bWVudFtUeG4uc2VuZGVyXVs0MDo0MV0KICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjdGl2ZV9jb21taXRtZW50IGV4aXN0cyBmb3IgYWNjb3VudAogICAgZHVwCiAgICBsZW4KICAgIGludCA0MAogICAgZGlnIDEKICAgID49CiAgICBpbnQgNDAKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgc3dhcAogICAgaW50IDQxCiAgICBkaWcgMQogICAgPj0KICAgIGludCA0MQogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBzdWJzdHJpbmczCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo4Ny04OQogICAgLy8gY29tbWl0dGVkX3BhcnRpY2lwYW50cyA9IGFyYzQuVUludDguZnJvbV9ieXRlcygKICAgIC8vICAgICBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdWzQwOjQxXQogICAgLy8gKQogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6OTEKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bNDE6NDJdCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NDYKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnQgPSBMb2NhbFN0YXRlKEJ5dGVzKQogICAgYnl0ZSAiYWN0aXZlX2NvbW1pdG1lbnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5MQogICAgLy8gc2VsZi5hY3RpdmVfY29tbWl0bWVudFtUeG4uc2VuZGVyXVs0MTo0Ml0KICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjdGl2ZV9jb21taXRtZW50IGV4aXN0cyBmb3IgYWNjb3VudAogICAgZHVwCiAgICBsZW4KICAgIGludCA0MQogICAgZGlnIDEKICAgID49CiAgICBpbnQgNDEKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgc3dhcAogICAgaW50IDQyCiAgICBkaWcgMQogICAgPj0KICAgIGludCA0MgogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBzdWJzdHJpbmczCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5MwogICAgLy8gZGVsIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl0KICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ2CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50ID0gTG9jYWxTdGF0ZShCeXRlcykKICAgIGJ5dGUgImFjdGl2ZV9jb21taXRtZW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6OTMKICAgIC8vIGRlbCBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdCiAgICBhcHBfbG9jYWxfZGVsCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5NQogICAgLy8gYXNzZXJ0IEdsb2JhbC5yb3VuZCA+PSBjb21taXR0ZWRfYmxvY2submF0aXZlCiAgICBnbG9iYWwgUm91bmQKICAgIGRpZyAyCiAgICBidG9pCiAgICA+PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5Ny0xMDIKICAgIC8vIHZyZl9vdXRwdXQsIF90eG4gPSBhcmM0LmFiaV9jYWxsW2FyYzQuRHluYW1pY0J5dGVzXSgKICAgIC8vICAgICAibXVzdF9nZXQiLAogICAgLy8gICAgIGNvbW1pdHRlZF9ibG9jaywKICAgIC8vICAgICBjb21taXR0ZWRfdHhfaWQsCiAgICAvLyAgICAgYXBwX2lkPVRlbXBsYXRlVmFyW1VJbnQ2NF0oIlJBTkRPTU5FU1NfQkVBQ09OX0lEIiksCiAgICAvLyApCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxMDEKICAgIC8vIGFwcF9pZD1UZW1wbGF0ZVZhcltVSW50NjRdKCJSQU5ET01ORVNTX0JFQUNPTl9JRCIpLAogICAgaW50IFRNUExfUkFORE9NTkVTU19CRUFDT05fSUQKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6OTctMTAyCiAgICAvLyB2cmZfb3V0cHV0LCBfdHhuID0gYXJjNC5hYmlfY2FsbFthcmM0LkR5bmFtaWNCeXRlc10oCiAgICAvLyAgICAgIm11c3RfZ2V0IiwKICAgIC8vICAgICBjb21taXR0ZWRfYmxvY2ssCiAgICAvLyAgICAgY29tbWl0dGVkX3R4X2lkLAogICAgLy8gICAgIGFwcF9pZD1UZW1wbGF0ZVZhcltVSW50NjRdKCJSQU5ET01ORVNTX0JFQUNPTl9JRCIpLAogICAgLy8gKQogICAgbWV0aG9kICJtdXN0X2dldCh1aW50NjQsYnl0ZVtdKWJ5dGVbXSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50IGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgc3dhcAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBBUkM0IHByZWZpeCBpcyB2YWxpZAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTA0CiAgICAvLyBzdGF0ZSA9IHBjZzEyOF9pbml0KHZyZl9vdXRwdXQubmF0aXZlKQogICAgZXh0cmFjdCAyIDAKICAgIGNhbGxzdWIgcGNnMTI4X2luaXQKICAgIGNvdmVyIDUKICAgIGNvdmVyIDQKICAgIGNvdmVyIDMKICAgIGNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjEyOAogICAgLy8gKVs6IGNvbW1pdHRlZF9wYXJ0aWNpcGFudHMubmF0aXZlXQogICAgc3dhcAogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxMDYtMTI4CiAgICAvLyAjIEtudXRoIHNodWZmbGUuCiAgICAvLyAjIFdlIHVzZSBhICJ0cnVuY2F0ZWQiIHZlcnNpb24gb2YgdGhlIGFsZ29yaXRobSB3aGVyZSB3ZSBzdG9wIGFmdGVyICJ3aW5uZXJzIiBpdGVyYXRpb25zLgogICAgLy8gIyBUaGUgYXJyYXkgdG8gYmUgc2h1ZmZsZWQgaXMgYW4gYXJyYXkgd2l0aCB0aGUgbnVtYmVycyBmcm9tIDEgdG8gInBhcnRpY2lwYW50cyIuCiAgICAvLyAjIFNpbmNlIHdlIGhhdmUgY29uc3RyYWluZWQgInBhcnRpY2lwYW50cyIsIHdlIGNhbiBwb3B1bGF0ZSB0aGUgYXJyYXkgaW4gY29uc3RhbnQgdGltZQogICAgLy8gIyAgYnkgc2xpY2luZyBhIHByZS1jb21wdXRlZCBieXRlYXJyYXkgd2l0aCBudW1iZXJzIGZyb20gMSB0byAyNTUgKGFyYzQuVUludDggbWF4IHZhbHVlKS4KICAgIC8vIHBhcnRpY2lwYW50cyA9IEJ5dGVzLmZyb21faGV4KAogICAgLy8gICAgICIwMTAyMDMwNDA1MDYwNzA4MDkwYTBiMGMwZDBlMGYxMCIKICAgIC8vICAgICAiMTExMjEzMTQxNTE2MTcxODE5MWExYjFjMWQxZTFmMjAiCiAgICAvLyAgICAgIjIxMjIyMzI0MjUyNjI3MjgyOTJhMmIyYzJkMmUyZjMwIgogICAgLy8gICAgICIzMTMyMzMzNDM1MzYzNzM4MzkzYTNiM2MzZDNlM2Y0MCIKICAgIC8vICAgICAiNDE0MjQzNDQ0NTQ2NDc0ODQ5NGE0YjRjNGQ0ZTRmNTAiCiAgICAvLyAgICAgIjUxNTI1MzU0NTU1NjU3NTg1OTVhNWI1YzVkNWU1ZjYwIgogICAgLy8gICAgICI2MTYyNjM2NDY1NjY2NzY4Njk2YTZiNmM2ZDZlNmY3MCIKICAgIC8vICAgICAiNzE3MjczNzQ3NTc2Nzc3ODc5N2E3YjdjN2Q3ZTdmODAiCiAgICAvLyAgICAgIjgxODI4Mzg0ODU4Njg3ODg4OThhOGI4YzhkOGU4ZjkwIgogICAgLy8gICAgICI5MTkyOTM5NDk1OTY5Nzk4OTk5YTliOWM5ZDllOWZhMCIKICAgIC8vICAgICAiYTFhMmEzYTRhNWE2YTdhOGE5YWFhYmFjYWRhZWFmYjAiCiAgICAvLyAgICAgImIxYjJiM2I0YjViNmI3YjhiOWJhYmJiY2JkYmViZmMwIgogICAgLy8gICAgICJjMWMyYzNjNGM1YzZjN2M4YzljYWNiY2NjZGNlY2ZkMCIKICAgIC8vICAgICAiZDFkMmQzZDRkNWQ2ZDdkOGQ5ZGFkYmRjZGRkZWRmZTAiCiAgICAvLyAgICAgImUxZTJlM2U0ZTVlNmU3ZThlOWVhZWJlY2VkZWVlZmYwIgogICAgLy8gICAgICJmMWYyZjNmNGY1ZjZmN2Y4ZjlmYWZiZmNmZGZlZmYiCiAgICAvLyApWzogY29tbWl0dGVkX3BhcnRpY2lwYW50cy5uYXRpdmVdCiAgICBkdXAKICAgIGludCAyNTUKICAgID49CiAgICBkaWcgMQogICAgaW50IDI1NQogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGJ5dGUgMHgwMTAyMDMwNDA1MDYwNzA4MDkwYTBiMGMwZDBlMGYxMDExMTIxMzE0MTUxNjE3MTgxOTFhMWIxYzFkMWUxZjIwMjEyMjIzMjQyNTI2MjcyODI5MmEyYjJjMmQyZTJmMzAzMTMyMzMzNDM1MzYzNzM4MzkzYTNiM2MzZDNlM2Y0MDQxNDI0MzQ0NDU0NjQ3NDg0OTRhNGI0YzRkNGU0ZjUwNTE1MjUzNTQ1NTU2NTc1ODU5NWE1YjVjNWQ1ZTVmNjA2MTYyNjM2NDY1NjY2NzY4Njk2YTZiNmM2ZDZlNmY3MDcxNzI3Mzc0NzU3Njc3Nzg3OTdhN2I3YzdkN2U3ZjgwODE4MjgzODQ4NTg2ODc4ODg5OGE4YjhjOGQ4ZThmOTA5MTkyOTM5NDk1OTY5Nzk4OTk5YTliOWM5ZDllOWZhMGExYTJhM2E0YTVhNmE3YThhOWFhYWJhY2FkYWVhZmIwYjFiMmIzYjRiNWI2YjdiOGI5YmFiYmJjYmRiZWJmYzBjMWMyYzNjNGM1YzZjN2M4YzljYWNiY2NjZGNlY2ZkMGQxZDJkM2Q0ZDVkNmQ3ZDhkOWRhZGJkY2RkZGVkZmUwZTFlMmUzZTRlNWU2ZTdlOGU5ZWFlYmVjZWRlZWVmZjBmMWYyZjNmNGY1ZjZmN2Y4ZjlmYWZiZmNmZGZlZmYKICAgIGludCAwCiAgICB1bmNvdmVyIDIKICAgIHN1YnN0cmluZzMKICAgIGNvdmVyIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjEzNC0xMzUKICAgIC8vICMgV2Uga25vdyB0aGF0LCBieSBjb25zdHJ1Y3Rpb24sICJ3aW5uZXJzIiA8PSAicGFydGljaXBhbnRzIi4KICAgIC8vIGlmIGNvbW1pdHRlZF93aW5uZXJzLm5hdGl2ZSA8IGNvbW1pdHRlZF9wYXJ0aWNpcGFudHMubmF0aXZlCiAgICBzd2FwCiAgICBidG9pCiAgICBkdXAKICAgIHVuY292ZXIgMgogICAgPAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTMzLTEzNgogICAgLy8gY29tbWl0dGVkX3dpbm5lcnMubmF0aXZlCiAgICAvLyAjIFdlIGtub3cgdGhhdCwgYnkgY29uc3RydWN0aW9uLCAid2lubmVycyIgPD0gInBhcnRpY2lwYW50cyIuCiAgICAvLyBpZiBjb21taXR0ZWRfd2lubmVycy5uYXRpdmUgPCBjb21taXR0ZWRfcGFydGljaXBhbnRzLm5hdGl2ZQogICAgLy8gZWxzZSBjb21taXR0ZWRfcGFydGljaXBhbnRzLm5hdGl2ZSAtIDEKICAgIGJ6IHJldmVhbF90ZXJuYXJ5X2ZhbHNlQDMKICAgIGZyYW1lX2RpZyA5CiAgICBmcmFtZV9idXJ5IDEKICAgIGIgcmV2ZWFsX3Rlcm5hcnlfbWVyZ2VANAoKcmV2ZWFsX3Rlcm5hcnlfZmFsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjEzNgogICAgLy8gZWxzZSBjb21taXR0ZWRfcGFydGljaXBhbnRzLm5hdGl2ZSAtIDEKICAgIGZyYW1lX2RpZyA3CiAgICBpbnQgMQogICAgLQogICAgZnJhbWVfYnVyeSAxCgpyZXZlYWxfdGVybmFyeV9tZXJnZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTM4LTE0MAogICAgLy8gIyBGSVhNRTogV2Ugc2hvdWxkIGNoZWNrIGhvdyBtdWNoIGZlZSB3YXMgcHJvdmlkZWQgZm9yIHRoaXMgY2FsbC4gSWYgaXQncyB0b28gbXVjaCBpdCdzIGEgZHJhaW5pbmcgYXR0YWNrCiAgICAvLyAjICBhbmQgdGhlIGNvbnRyYWN0IHNob3VsZCBwcm90ZWN0IHRoZSB1c2VyL2Z1bmRpbmcgYWNjb3VudC4KICAgIC8vIGVuc3VyZV9idWRnZXQoNzAwICogbl9zaHVmZmxlcywgT3BVcEZlZVNvdXJjZS5Hcm91cENyZWRpdCkKICAgIGludCA3MDAKICAgIGZyYW1lX2RpZyAxCiAgICAqCiAgICBpbnQgMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDEKICAgIC8vIGZvciBpIGluIHVyYW5nZShuX3NodWZmbGVzKToKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDAKCnJldmVhbF9mb3JfaGVhZGVyQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDEKICAgIC8vIGZvciBpIGluIHVyYW5nZShuX3NodWZmbGVzKToKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgMQogICAgPAogICAgYnogcmV2ZWFsX2FmdGVyX2ZvckA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDQKICAgIC8vIEJpZ1VJbnQoaSksCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDUKICAgIC8vIEJpZ1VJbnQoY29tbWl0dGVkX3BhcnRpY2lwYW50cy5uYXRpdmUpLAogICAgZnJhbWVfZGlnIDcKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE0Mi0xNDcKICAgIC8vIHN0YXRlLCBzZXF1ZW5jZSA9IHBjZzEyOF9yYW5kb20oCiAgICAvLyAgICAgc3RhdGUsCiAgICAvLyAgICAgQmlnVUludChpKSwKICAgIC8vICAgICBCaWdVSW50KGNvbW1pdHRlZF9wYXJ0aWNpcGFudHMubmF0aXZlKSwKICAgIC8vICAgICBVSW50NjQoMSksCiAgICAvLyApCiAgICBmcmFtZV9kaWcgNgogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9kaWcgMwogICAgdW5jb3ZlciA1CiAgICB1bmNvdmVyIDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE0NgogICAgLy8gVUludDY0KDEpLAogICAgaW50IDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE0Mi0xNDcKICAgIC8vIHN0YXRlLCBzZXF1ZW5jZSA9IHBjZzEyOF9yYW5kb20oCiAgICAvLyAgICAgc3RhdGUsCiAgICAvLyAgICAgQmlnVUludChpKSwKICAgIC8vICAgICBCaWdVSW50KGNvbW1pdHRlZF9wYXJ0aWNpcGFudHMubmF0aXZlKSwKICAgIC8vICAgICBVSW50NjQoMSksCiAgICAvLyApCiAgICBjYWxsc3ViIHBjZzEyOF9yYW5kb20KICAgIGNvdmVyIDQKICAgIGZyYW1lX2J1cnkgMwogICAgZnJhbWVfYnVyeSA0CiAgICBmcmFtZV9idXJ5IDUKICAgIGZyYW1lX2J1cnkgNgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTQ4CiAgICAvLyByID0gb3AuZ2V0Ynl0ZShzZXF1ZW5jZVswXS5ieXRlcywgMTUpCiAgICBleHRyYWN0IDIgMAogICAgZXh0cmFjdCAwIDE2IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgaW50IDE1CiAgICBnZXRieXRlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDkKICAgIC8vIHBhcnRpY2lwYW50c19pID0gb3AuZ2V0Ynl0ZShwYXJ0aWNpcGFudHMsIGkpCiAgICBmcmFtZV9kaWcgOAogICAgZHVwCiAgICBkaWcgMwogICAgZ2V0Ynl0ZQogICAgY292ZXIgMwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTUwCiAgICAvLyBwYXJ0aWNpcGFudHNfciA9IG9wLmdldGJ5dGUocGFydGljaXBhbnRzLCByKQogICAgZHVwCiAgICBkaWcgMgogICAgZ2V0Ynl0ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTUxCiAgICAvLyBwYXJ0aWNpcGFudHMgPSBvcC5zZXRieXRlKHBhcnRpY2lwYW50cywgaSwgcGFydGljaXBhbnRzX3IpCiAgICBkaWcgMwogICAgc3dhcAogICAgc2V0Ynl0ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTUyCiAgICAvLyBwYXJ0aWNpcGFudHMgPSBvcC5zZXRieXRlKHBhcnRpY2lwYW50cywgciwgcGFydGljaXBhbnRzX2kpCiAgICBzd2FwCiAgICB1bmNvdmVyIDMKICAgIHNldGJ5dGUKICAgIGZyYW1lX2J1cnkgOAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTQxCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uobl9zaHVmZmxlcyk6CiAgICBpbnQgMQogICAgKwogICAgZnJhbWVfYnVyeSAwCiAgICBiIHJldmVhbF9mb3JfaGVhZGVyQDUKCnJldmVhbF9hZnRlcl9mb3JAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE1NQogICAgLy8gYXJjNC5VSW50MTYoY29tbWl0dGVkX3dpbm5lcnMubmF0aXZlKS5ieXRlcwogICAgZnJhbWVfZGlnIDkKICAgIGR1cAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE1NgogICAgLy8gKyBwYXJ0aWNpcGFudHNbOiBjb21taXR0ZWRfd2lubmVycy5uYXRpdmVdCiAgICBmcmFtZV9kaWcgOAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBsZW4KICAgIGR1cDIKICAgID49CiAgICBzZWxlY3QKICAgIGludCAwCiAgICBzd2FwCiAgICBzdWJzdHJpbmczCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNTUtMTU2CiAgICAvLyBhcmM0LlVJbnQxNihjb21taXR0ZWRfd2lubmVycy5uYXRpdmUpLmJ5dGVzCiAgICAvLyArIHBhcnRpY2lwYW50c1s6IGNvbW1pdHRlZF93aW5uZXJzLm5hdGl2ZV0KICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTU0LTE1NwogICAgLy8gcmV0dXJuIGNvbW1pdHRlZF90eF9pZC5jb3B5KCksIGFyYzQuRHluYW1pY0FycmF5W2FyYzQuVUludDhdLmZyb21fYnl0ZXMoCiAgICAvLyAgICAgYXJjNC5VSW50MTYoY29tbWl0dGVkX3dpbm5lcnMubmF0aXZlKS5ieXRlcwogICAgLy8gICAgICsgcGFydGljaXBhbnRzWzogY29tbWl0dGVkX3dpbm5lcnMubmF0aXZlXQogICAgLy8gKQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2J1cnkgMAogICAgZnJhbWVfYnVyeSAxCiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnBjZzEyOC5wY2cxMjhfaW5pdChzZWVkOiBieXRlcykgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0OgpwY2cxMjhfaW5pdDoKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjIwLTIxCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIHBjZzEyOF9pbml0KHNlZWQ6IEJ5dGVzKSAtPiBQQ0cxMjhTVEFURToKICAgIHByb3RvIDEgNAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MzEKICAgIC8vIGFzc2VydCBzZWVkLmxlbmd0aCA9PSAzMgogICAgZnJhbWVfZGlnIC0xCiAgICBsZW4KICAgIGludCAzMgogICAgPT0KICAgIGFzc2VydAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MzQKICAgIC8vIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCAwKSwgVUludDY0KFBDR19GSVJTVF9JTkNSRU1FTlQpKSwKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgY2FsbHN1YiBfX3BjZzMyX2luaXQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjM1CiAgICAvLyBfX3BjZzMyX2luaXQob3AuZXh0cmFjdF91aW50NjQoc2VlZCwgOCksIFVJbnQ2NChQQ0dfU0VDT05EX0lOQ1JFTUVOVCkpLAogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgOAogICAgZXh0cmFjdF91aW50NjQKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDA5CiAgICBjYWxsc3ViIF9fcGNnMzJfaW5pdAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MzYKICAgIC8vIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCAxNiksIFVJbnQ2NChQQ0dfVEhJUkRfSU5DUkVNRU5UKSksCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDExCiAgICBjYWxsc3ViIF9fcGNnMzJfaW5pdAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MzcKICAgIC8vIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCAyNCksIFVJbnQ2NChQQ0dfRk9VUlRIX0lOQ1JFTUVOVCkpLAogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgMjQKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQxMwogICAgY2FsbHN1YiBfX3BjZzMyX2luaXQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjMzLTM4CiAgICAvLyByZXR1cm4gKAogICAgLy8gICAgIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCAwKSwgVUludDY0KFBDR19GSVJTVF9JTkNSRU1FTlQpKSwKICAgIC8vICAgICBfX3BjZzMyX2luaXQob3AuZXh0cmFjdF91aW50NjQoc2VlZCwgOCksIFVJbnQ2NChQQ0dfU0VDT05EX0lOQ1JFTUVOVCkpLAogICAgLy8gICAgIF9fcGNnMzJfaW5pdChvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCAxNiksIFVJbnQ2NChQQ0dfVEhJUkRfSU5DUkVNRU5UKSksCiAgICAvLyAgICAgX19wY2czMl9pbml0KG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDI0KSwgVUludDY0KFBDR19GT1VSVEhfSU5DUkVNRU5UKSksCiAgICAvLyApCiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnBjZzMyLl9fcGNnMzJfaW5pdChpbml0aWFsX3N0YXRlOiB1aW50NjQsIGluY3I6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyX2luaXQ6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjEzOS0xNDAKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX19wY2czMl9pbml0KGluaXRpYWxfc3RhdGU6IFBDRzMyU1RBVEUsIGluY3I6IFVJbnQ2NCkgLT4gUENHMzJTVEFURToKICAgIHByb3RvIDIgMQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToxNTUKICAgIC8vIHN0YXRlID0gX19wY2czMl9zdGVwKFVJbnQ2NCgwKSwgaW5jcikKICAgIGludCAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjE1NgogICAgLy8gX2hpZ2hfYWRkdywgc3RhdGUgPSBvcC5hZGR3KHN0YXRlLCBpbml0aWFsX3N0YXRlKQogICAgZnJhbWVfZGlnIC0yCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MTU4CiAgICAvLyByZXR1cm4gX19wY2czMl9zdGVwKHN0YXRlLCBpbmNyKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy5wY2czMi5fX3BjZzMyX3N0ZXAoc3RhdGU6IHVpbnQ2NCwgaW5jcjogdWludDY0KSAtPiB1aW50NjQ6Cl9fcGNnMzJfc3RlcDoKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MTYxLTE2MgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfX3BjZzMyX3N0ZXAoc3RhdGU6IFBDRzMyU1RBVEUsIGluY3I6IFVJbnQ2NCkgLT4gUENHMzJTVEFURToKICAgIHByb3RvIDIgMQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToxNzMKICAgIC8vIF9oaWdoX211bCwgbG93X211bCA9IG9wLm11bHcoc3RhdGUsIFBDR19NVUxUSVBMSUVSKQogICAgZnJhbWVfZGlnIC0yCiAgICBpbnQgNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjE3NAogICAgLy8gX2hpZ2hfYWRkLCBsb3dfYWRkID0gb3AuYWRkdyhsb3dfbXVsLCBpbmNyKQogICAgZnJhbWVfZGlnIC0xCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6MTc2CiAgICAvLyByZXR1cm4gbG93X2FkZAogICAgcmV0c3ViCgoKLy8gYWxnb3B5LmVuc3VyZV9idWRnZXQocmVxdWlyZWRfYnVkZ2V0OiB1aW50NjQsIGZlZV9zb3VyY2U6IHVpbnQ2NCkgLT4gdm9pZDoKZW5zdXJlX2J1ZGdldDoKICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToxMS0xNwogICAgcHJvdG8gMiAwCiAgICAvLyA8YWxnb3B5Pi9hbGdvcHkucHk6MTgKICAgIGZyYW1lX2RpZyAtMgogICAgaW50IDEwCiAgICArCgplbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxOgogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjE5CiAgICBmcmFtZV9kaWcgMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3CiAgICAvLyA8YWxnb3B5Pi9hbGdvcHkucHk6MjAKICAgIGl0eG5fYmVnaW4KICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyMQogICAgaW50IGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyMgogICAgaW50IERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjIzCiAgICBieXRlIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjI0CiAgICBieXRlIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICAvLyA8YWxnb3B5Pi9hbGdvcHkucHk6MjUtMjkKICAgIGZyYW1lX2RpZyAtMQogICAgc3dpdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMzoKICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyNwogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzFANDoKICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyOQogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgaXR4bl9maWVsZCBGZWUKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2OgogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjMwCiAgICBpdHhuX3N1Ym1pdAogICAgYiBlbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxCgplbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDc6CiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnBjZzEyOC5wY2cxMjhfcmFuZG9tKHN0YXRlLjA6IHVpbnQ2NCwgc3RhdGUuMTogdWludDY0LCBzdGF0ZS4yOiB1aW50NjQsIHN0YXRlLjM6IHVpbnQ2NCwgbG93ZXJfYm91bmQ6IGJ5dGVzLCB1cHBlcl9ib3VuZDogYnl0ZXMsIGxlbmd0aDogdWludDY0KSAtPiB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIGJ5dGVzOgpwY2cxMjhfcmFuZG9tOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6NDEtNDcKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgcGNnMTI4X3JhbmRvbSgKICAgIC8vICAgICBzdGF0ZTogUENHMTI4U1RBVEUsCiAgICAvLyAgICAgbG93ZXJfYm91bmQ6IEJpZ1VJbnQsCiAgICAvLyAgICAgdXBwZXJfYm91bmQ6IEJpZ1VJbnQsCiAgICAvLyAgICAgbGVuZ3RoOiBVSW50NjQsCiAgICAvLyApIC0+IHR1cGxlW1BDRzEyOFNUQVRFLCBhcmM0LkR5bmFtaWNBcnJheVthcmM0LlVJbnQxMjhdXToKICAgIHByb3RvIDcgNQogICAgaW50IDAKICAgIGR1cG4gMgogICAgYnl0ZSAiIgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6NjYKICAgIC8vIHJlc3VsdCA9IGFyYzQuRHluYW1pY0FycmF5W2FyYzQuVUludDEyOF0oKQogICAgYnl0ZSAweDAwMDAKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjY4CiAgICAvLyBpZiBsb3dlcl9ib3VuZCA9PSAwIGFuZCB1cHBlcl9ib3VuZCA9PSAwOgogICAgZnJhbWVfZGlnIC0zCiAgICBieXRlIDB4CiAgICBiPT0KICAgIGJ6IHBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDcKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZSAweAogICAgYj09CiAgICBieiBwY2cxMjhfcmFuZG9tX2Vsc2VfYm9keUA3CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weTo2OQogICAgLy8gZm9yIGkgaW4gdXJhbmdlKGxlbmd0aCk6ICAjIG5vcWE6IEIwMDcKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDMKCnBjZzEyOF9yYW5kb21fZm9yX2hlYWRlckAzOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6NjkKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIC0xCiAgICA8CiAgICBieiBwY2cxMjhfcmFuZG9tX2FmdGVyX2lmX2Vsc2VAMjAKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjcwCiAgICAvLyBzdGF0ZSwgbiA9IF9fcGNnMTI4X3VuYm91bmRlZF9yYW5kb20oc3RhdGUpCiAgICBmcmFtZV9kaWcgLTcKICAgIGZyYW1lX2RpZyAtNgogICAgZnJhbWVfZGlnIC01CiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX19wY2cxMjhfdW5ib3VuZGVkX3JhbmRvbQogICAgY292ZXIgNAogICAgZnJhbWVfYnVyeSAtNAogICAgZnJhbWVfYnVyeSAtNQogICAgZnJhbWVfYnVyeSAtNgogICAgZnJhbWVfYnVyeSAtNwogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6NzIKICAgIC8vIHJlc3VsdC5hcHBlbmQoYXJjNC5VSW50MTI4KG4pKQogICAgZnJhbWVfZGlnIDQKICAgIGV4dHJhY3QgMiAwCiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgaW50IDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnQgMTYKICAgIGJ6ZXJvCiAgICBifAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50IDE2CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjY5CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UobGVuZ3RoKTogICMgbm9xYTogQjAwNwogICAgZnJhbWVfZGlnIDMKICAgIGludCAxCiAgICArCiAgICBmcmFtZV9idXJ5IDMKICAgIGIgcGNnMTI4X3JhbmRvbV9mb3JfaGVhZGVyQDMKCnBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDc6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weTo3NAogICAgLy8gaWYgdXBwZXJfYm91bmQgIT0gMDoKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZSAweAogICAgYiE9CiAgICBieiBwY2cxMjhfcmFuZG9tX2Vsc2VfYm9keUA5CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weTo3NQogICAgLy8gYXNzZXJ0IHVwcGVyX2JvdW5kID4gQmlnVUludCgxKQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4MDEKICAgIGI+CiAgICBhc3NlcnQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5Ojc2CiAgICAvLyBhc3NlcnQgdXBwZXJfYm91bmQgPCBCaWdVSW50KDEgPDwgMTI4KQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4MDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgYjwKICAgIGFzc2VydAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6NzcKICAgIC8vIGFzc2VydCBsb3dlcl9ib3VuZCA8IHVwcGVyX2JvdW5kIC0gQmlnVUludCgxKQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4MDEKICAgIGItCiAgICBmcmFtZV9kaWcgLTMKICAgIGI+CiAgICBhc3NlcnQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5Ojc5CiAgICAvLyBhYnNvbHV0ZV9ib3VuZCA9IHVwcGVyX2JvdW5kIC0gbG93ZXJfYm91bmQKICAgIGZyYW1lX2RpZyAtMgogICAgZnJhbWVfZGlnIC0zCiAgICBiLQogICAgZnJhbWVfYnVyeSAwCiAgICBiIHBjZzEyOF9yYW5kb21fYWZ0ZXJfaWZfZWxzZUAxMAoKcGNnMTI4X3JhbmRvbV9lbHNlX2JvZHlAOToKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjgxCiAgICAvLyBhc3NlcnQgbG93ZXJfYm91bmQgPCBCaWdVSW50KDEgPDwgMTI4IC0gMSkKICAgIGZyYW1lX2RpZyAtMwogICAgYnl0ZSAweDgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBiPAogICAgYXNzZXJ0CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weTo4MwogICAgLy8gYWJzb2x1dGVfYm91bmQgPSBCaWdVSW50KDEgPDwgMTI4KSAtIGxvd2VyX2JvdW5kCiAgICBieXRlIDB4MDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgZnJhbWVfZGlnIC0zCiAgICBiLQogICAgZnJhbWVfYnVyeSAwCgpwY2cxMjhfcmFuZG9tX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weTo4NQogICAgLy8gdGhyZXNob2xkID0gX191aW50MTI4X3R3b3MoYWJzb2x1dGVfYm91bmQpICUgYWJzb2x1dGVfYm91bmQKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNhbGxzdWIgX191aW50MTI4X3R3b3MKICAgIHN3YXAKICAgIGIlCiAgICBmcmFtZV9idXJ5IDIKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5Ojg3CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UobGVuZ3RoKTogICMgbm9xYTogQjAwNwogICAgaW50IDAKICAgIGZyYW1lX2J1cnkgMwoKcGNnMTI4X3JhbmRvbV9mb3JfaGVhZGVyQDExOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6ODcKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIC0xCiAgICA8CiAgICBieiBwY2cxMjhfcmFuZG9tX2FmdGVyX2ZvckAxOQoKcGNnMTI4X3JhbmRvbV93aGlsZV90b3BAMTM6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weTo4OQogICAgLy8gc3RhdGUsIGNhbmRpZGF0ZSA9IF9fcGNnMTI4X3VuYm91bmRlZF9yYW5kb20oc3RhdGUpCiAgICBmcmFtZV9kaWcgLTcKICAgIGZyYW1lX2RpZyAtNgogICAgZnJhbWVfZGlnIC01CiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX19wY2cxMjhfdW5ib3VuZGVkX3JhbmRvbQogICAgZHVwCiAgICBjb3ZlciA1CiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2J1cnkgLTQKICAgIGZyYW1lX2J1cnkgLTUKICAgIGZyYW1lX2J1cnkgLTYKICAgIGZyYW1lX2J1cnkgLTcKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjkwCiAgICAvLyBpZiBjYW5kaWRhdGUgPj0gdGhyZXNob2xkOgogICAgZnJhbWVfZGlnIDIKICAgIGI+PQogICAgYnogcGNnMTI4X3JhbmRvbV93aGlsZV90b3BAMTMKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjkxLTkzCiAgICAvLyByZXN1bHQuYXBwZW5kKAogICAgLy8gICAgIGFyYzQuVUludDEyOCgoY2FuZGlkYXRlICUgYWJzb2x1dGVfYm91bmQpICsgbG93ZXJfYm91bmQpCiAgICAvLyApCiAgICBmcmFtZV9kaWcgNAogICAgZXh0cmFjdCAyIDAKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjkyCiAgICAvLyBhcmM0LlVJbnQxMjgoKGNhbmRpZGF0ZSAlIGFic29sdXRlX2JvdW5kKSArIGxvd2VyX2JvdW5kKQogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAwCiAgICBiJQogICAgZnJhbWVfZGlnIC0zCiAgICBiKwogICAgZHVwCiAgICBsZW4KICAgIGludCAxNgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50IDE2CiAgICBiemVybwogICAgYnwKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjkxLTkzCiAgICAvLyByZXN1bHQuYXBwZW5kKAogICAgLy8gICAgIGFyYzQuVUludDEyOCgoY2FuZGlkYXRlICUgYWJzb2x1dGVfYm91bmQpICsgbG93ZXJfYm91bmQpCiAgICAvLyApCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMTYKICAgIC8KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6ODcKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBwY2cxMjhfcmFuZG9tX2Zvcl9oZWFkZXJAMTEKCnBjZzEyOF9yYW5kb21fYWZ0ZXJfZm9yQDE5OgoKcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDIwOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6OTYKICAgIC8vIHJldHVybiBzdGF0ZSwgcmVzdWx0LmNvcHkoKQogICAgZnJhbWVfZGlnIC03CiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgNAogICAgdW5jb3ZlciA5CiAgICB1bmNvdmVyIDkKICAgIHVuY292ZXIgOQogICAgdW5jb3ZlciA5CiAgICB1bmNvdmVyIDkKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cucGNnMTI4Ll9fcGNnMTI4X3VuYm91bmRlZF9yYW5kb20oc3RhdGUuMDogdWludDY0LCBzdGF0ZS4xOiB1aW50NjQsIHN0YXRlLjI6IHVpbnQ2NCwgc3RhdGUuMzogdWludDY0KSAtPiB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIGJ5dGVzOgpfX3BjZzEyOF91bmJvdW5kZWRfcmFuZG9tOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6OTktMTAwCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMTI4X3VuYm91bmRlZF9yYW5kb20oc3RhdGU6IFBDRzEyOFNUQVRFKSAtPiB0dXBsZVtQQ0cxMjhTVEFURSwgQmlnVUludF06CiAgICBwcm90byA0IDUKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjExNAogICAgLy8gbmV3X3N0YXRlMSA9IF9fcGNnMzJfc3RlcChzdGF0ZVswXSwgVUludDY0KFBDR19GSVJTVF9JTkNSRU1FTlQpKQogICAgZnJhbWVfZGlnIC00CiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgY2FsbHN1YiBfX3BjZzMyX3N0ZXAKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjExNwogICAgLy8gc3RhdGVbMV0sIFVJbnQ2NChQQ0dfU0VDT05EX0lOQ1JFTUVOVCkgPDwgKG5ld19zdGF0ZTEgPT0gMCkKICAgIGR1cAogICAgIQogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MDkKICAgIHN3YXAKICAgIHNobAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MTE2LTExOAogICAgLy8gbmV3X3N0YXRlMiA9IF9fcGNnMzJfc3RlcCgKICAgIC8vICAgICBzdGF0ZVsxXSwgVUludDY0KFBDR19TRUNPTkRfSU5DUkVNRU5UKSA8PCAobmV3X3N0YXRlMSA9PSAwKQogICAgLy8gKQogICAgZnJhbWVfZGlnIC0zCiAgICBzd2FwCiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MTIxCiAgICAvLyBzdGF0ZVsyXSwgVUludDY0KFBDR19USElSRF9JTkNSRU1FTlQpIDw8IChuZXdfc3RhdGUyID09IDApCiAgICBkdXAKICAgICEKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDExCiAgICBzd2FwCiAgICBzaGwKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjEyMC0xMjIKICAgIC8vIG5ld19zdGF0ZTMgPSBfX3BjZzMyX3N0ZXAoCiAgICAvLyAgICAgc3RhdGVbMl0sIFVJbnQ2NChQQ0dfVEhJUkRfSU5DUkVNRU5UKSA8PCAobmV3X3N0YXRlMiA9PSAwKQogICAgLy8gKQogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MTI1CiAgICAvLyBzdGF0ZVszXSwgVUludDY0KFBDR19GT1VSVEhfSU5DUkVNRU5UKSA8PCAobmV3X3N0YXRlMyA9PSAwKQogICAgZHVwCiAgICAhCiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQxMwogICAgc3dhcAogICAgc2hsCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weToxMjQtMTI2CiAgICAvLyBuZXdfc3RhdGU0ID0gX19wY2czMl9zdGVwKAogICAgLy8gICAgIHN0YXRlWzNdLCBVSW50NjQoUENHX0ZPVVJUSF9JTkNSRU1FTlQpIDw8IChuZXdfc3RhdGUzID09IDApCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3YXAKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weToxMzEKICAgIC8vIG9wLml0b2IoX19wY2czMl9vdXRwdXQoc3RhdGVbMF0pIDw8IDMyIHwgX19wY2czMl9vdXRwdXQoc3RhdGVbMV0pKQogICAgZnJhbWVfZGlnIC00CiAgICBjYWxsc3ViIF9fcGNnMzJfb3V0cHV0CiAgICBpbnQgMzIKICAgIHNobAogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9fcGNnMzJfb3V0cHV0CiAgICB8CiAgICBpdG9iCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weToxMzIKICAgIC8vICsgb3AuaXRvYihfX3BjZzMyX291dHB1dChzdGF0ZVsyXSkgPDwgMzIgfCBfX3BjZzMyX291dHB1dChzdGF0ZVszXSkpCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgX19wY2czMl9vdXRwdXQKICAgIGludCAzMgogICAgc2hsCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX19wY2czMl9vdXRwdXQKICAgIHwKICAgIGl0b2IKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMTI4LnB5OjEzMS0xMzIKICAgIC8vIG9wLml0b2IoX19wY2czMl9vdXRwdXQoc3RhdGVbMF0pIDw8IDMyIHwgX19wY2czMl9vdXRwdXQoc3RhdGVbMV0pKQogICAgLy8gKyBvcC5pdG9iKF9fcGNnMzJfb3V0cHV0KHN0YXRlWzJdKSA8PCAzMiB8IF9fcGNnMzJfb3V0cHV0KHN0YXRlWzNdKSkKICAgIGNvbmNhdAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2cxMjgucHk6MTI4LTEzNAogICAgLy8gcmV0dXJuICgKICAgIC8vICAgICAobmV3X3N0YXRlMSwgbmV3X3N0YXRlMiwgbmV3X3N0YXRlMywgbmV3X3N0YXRlNCksCiAgICAvLyAgICAgQmlnVUludC5mcm9tX2J5dGVzKAogICAgLy8gICAgICAgICBvcC5pdG9iKF9fcGNnMzJfb3V0cHV0KHN0YXRlWzBdKSA8PCAzMiB8IF9fcGNnMzJfb3V0cHV0KHN0YXRlWzFdKSkKICAgIC8vICAgICAgICAgKyBvcC5pdG9iKF9fcGNnMzJfb3V0cHV0KHN0YXRlWzJdKSA8PCAzMiB8IF9fcGNnMzJfb3V0cHV0KHN0YXRlWzNdKSkKICAgIC8vICAgICApLAogICAgLy8gKQogICAgcmV0c3ViCgoKLy8gbGliX3BjZy5wY2czMi5fX3BjZzMyX291dHB1dChzdGF0ZTogdWludDY0KSAtPiB1aW50NjQ6Cl9fcGNnMzJfb3V0cHV0OgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy9wY2czMi5weToyNzUtMjc2CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMzJfb3V0cHV0KHN0YXRlOiBQQ0czMlNUQVRFKSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6Mjc4LTI4NAogICAgLy8gIyBPcmlnaW5hbCBib2R5IG9mIHRoZSBmdW5jdGlvbiB3aXRoIG1vcmUgYWJzdHJhY3Rpb246CiAgICAvLyAjIHhvcnNoaWZ0ZWQgPSBfX21hc2tfdG9fdWludDMyKCgoc3RhdGUgPj4gMTgpIF4gc3RhdGUpID4+IDI3KQogICAgLy8gIyByb3QgPSBzdGF0ZSA+PiA1OQogICAgLy8gIyByZXR1cm4gKHhvcnNoaWZ0ZWQgPj4gcm90KSB8IF9fbWFza190b191aW50MzIoCiAgICAvLyAjICAgICB4b3JzaGlmdGVkIDw8IChfX3VpbnQ2NF90d29zKHJvdCkgJiAzMSkKICAgIC8vICMgKQogICAgLy8geG9yc2hpZnRlZCA9ICgoKHN0YXRlID4+IDE4KSBeIHN0YXRlKSA+PiAyNykgJiAoKDEgPDwgMzIpIC0gMSkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDE4CiAgICBzaHIKICAgIGZyYW1lX2RpZyAtMQogICAgXgogICAgaW50IDI3CiAgICBzaHIKICAgIGludCA0Mjk0OTY3Mjk1CiAgICAmCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI4NQogICAgLy8gcm90ID0gc3RhdGUgPj4gNTkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDU5CiAgICBzaHIKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cvcGNnMzIucHk6Mjg2CiAgICAvLyBfaGlnaF90d29zX3JvdCwgbG93X3R3b3Nfcm90ID0gb3AuYWRkdyh+cm90LCAxKQogICAgZHVwCiAgICB+CiAgICBpbnQgMQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzMyLnB5OjI4NwogICAgLy8gcmV0dXJuICh4b3JzaGlmdGVkID4+IHJvdCkgfCAoKHhvcnNoaWZ0ZWQgPDwgKGxvd190d29zX3JvdCAmIDMxKSkgJiAoKDEgPDwgMzIpIC0gMSkpCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzaHIKICAgIGNvdmVyIDIKICAgIGludCAzMQogICAgJgogICAgc2hsCiAgICBpbnQgNDI5NDk2NzI5NQogICAgJgogICAgfAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy5wY2cxMjguX191aW50MTI4X3R3b3ModmFsdWU6IGJ5dGVzKSAtPiBieXRlczoKX191aW50MTI4X3R3b3M6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weToxMzctMTM4CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fdWludDEyOF90d29zKHZhbHVlOiBCaWdVSW50KSAtPiBCaWdVSW50OgogICAgcHJvdG8gMSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3BjZzEyOC5weToxNjAKICAgIC8vIHJldHVybiAoQmlnVUludC5mcm9tX2J5dGVzKH52YWx1ZS5ieXRlcykgKyAxKSAmIEJpZ1VJbnQoKDEgPDwgMTI4KSAtIDEpCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ+CiAgICBieXRlIDB4MDEKICAgIGIrCiAgICBieXRlIDB4ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYKICAgIGImCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkudXBkYXRlKCkgLT4gdm9pZDoKdXBkYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NDgtNDkKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5VcGRhdGVBcHBsaWNhdGlvbl0pCiAgICAvLyBkZWYgdXBkYXRlKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjUwCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZXJpZmlhYmxlX2dpdmVhd2F5LmNvbnRyYWN0LlZlcmlmaWFibGVHaXZlYXdheS5kZWxldGUoKSAtPiB2b2lkOgpkZWxldGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo1Mi01MwogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLkRlbGV0ZUFwcGxpY2F0aW9uXSkKICAgIC8vIGRlZiBkZWxldGUoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTQKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ0CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {
                "active_commitment": {
                    "type": "bytes",
                    "key": "active_commitment"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "VerifiableGiveaway",
        "methods": [
            {
                "name": "commit",
                "args": [
                    {
                        "type": "uint8",
                        "name": "delay"
                    },
                    {
                        "type": "uint8",
                        "name": "participants"
                    },
                    {
                        "type": "uint8",
                        "name": "winners"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reveal",
                "args": [],
                "returns": {
                    "type": "(byte[],uint8[])"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "delete_application": "CALL",
        "no_op": "CREATE",
        "update_application": "CALL"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class CommitArgs(_ArgsBase[None]):
    delay: int
    participants: int
    winners: int

    @staticmethod
    def method() -> str:
        return "commit(uint8,uint8,uint8)void"


@dataclasses.dataclass(kw_only=True)
class RevealArgs(_ArgsBase[tuple[bytes | bytearray, list[int]]]):
    @staticmethod
    def method() -> str:
        return "reveal()(byte[],uint8[])"


class ByteReader:
    def __init__(self, data: bytes):
        self._data = data

    @property
    def as_bytes(self) -> bytes:
        return self._data

    @property
    def as_str(self) -> str:
        return self._data.decode("utf8")

    @property
    def as_base64(self) -> str:
        return base64.b64encode(self._data).decode("utf8")

    @property
    def as_hex(self) -> str:
        return self._data.hex()


class LocalState:
    def __init__(self, data: dict[bytes, bytes | int]):
        self.active_commitment = ByteReader(typing.cast(bytes, data.get(b"active_commitment")))


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def commit(
        self,
        *,
        delay: int,
        participants: int,
        winners: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `commit(uint8,uint8,uint8)void` ABI method
        
        :param int delay: The `delay` ABI parameter
        :param int participants: The `participants` ABI parameter
        :param int winners: The `winners` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CommitArgs(
            delay=delay,
            participants=participants,
            winners=winners,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def reveal(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `reveal()(byte[],uint8[])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RevealArgs()
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_update(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def delete_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a calls to the delete_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_delete(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return self

    def opt_in_commit(
        self,
        *,
        delay: int,
        participants: int,
        winners: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `commit(uint8,uint8,uint8)void` ABI method
        
        :param int delay: The `delay` ABI parameter
        :param int participants: The `participants` ABI parameter
        :param int winners: The `winners` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = CommitArgs(
            delay=delay,
            participants=participants,
            winners=winners,
        )
        self.app_client.compose_opt_in(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def close_out_reveal(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to `reveal()(byte[],uint8[])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RevealArgs()
        self.app_client.compose_close_out(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class VerifiableGiveawayClient:
    """A class for interacting with the VerifiableGiveaway app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        VerifiableGiveawayClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def get_local_state(self, account: str | None = None) -> LocalState:
        """Returns the application's local state wrapped in a strongly typed class with options to format the stored value"""

        state = typing.cast(dict[bytes, bytes | int], self.app_client.get_local_state(account, raw=True))
        return LocalState(state)

    def commit(
        self,
        *,
        delay: int,
        participants: int,
        winners: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `commit(uint8,uint8,uint8)void` ABI method
        
        :param int delay: The `delay` ABI parameter
        :param int participants: The `participants` ABI parameter
        :param int winners: The `winners` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CommitArgs(
            delay=delay,
            participants=participants,
            winners=winners,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def reveal(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[tuple[bytes | bytearray, list[int]]]:
        """Calls `reveal()(byte[],uint8[])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[tuple[bytes | bytearray, list[int]]]: The result of the transaction"""

        args = RevealArgs()
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def update_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the update_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.update(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def delete_bare(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the delete_application bare method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.delete(
            call_abi_method=False,
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
        )
        return result

    def opt_in_commit(
        self,
        *,
        delay: int,
        participants: int,
        winners: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Calls `commit(uint8,uint8,uint8)void` ABI method
        
        :param int delay: The `delay` ABI parameter
        :param int participants: The `participants` ABI parameter
        :param int winners: The `winners` ABI parameter
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = CommitArgs(
            delay=delay,
            participants=participants,
            winners=winners,
        )
        result = self.app_client.opt_in(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def close_out_reveal(
        self,
        *,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[tuple[bytes | bytearray, list[int]]]:
        """Calls `reveal()(byte[],uint8[])` ABI method
        
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[tuple[bytes | bytearray, list[int]]]: The result of the transaction"""

        args = RevealArgs()
        result = self.app_client.close_out(
            call_abi_method=args.method(),
            transaction_parameters=_convert_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
