{
    "hints": {
        "commit(uint8,uint8,uint8)void": {
            "call_config": {
                "no_op": "CALL",
                "opt_in": "CALL"
            }
        },
        "reveal()(byte[],uint8[])": {
            "call_config": {
                "no_op": "CALL",
                "close_out": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A2CiAgICBtZXRob2QgImNvbW1pdCh1aW50OCx1aW50OCx1aW50OCl2b2lkIgogICAgbWV0aG9kICJyZXZlYWwoKShieXRlW10sdWludDhbXSkiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NvbW1pdF9yb3V0ZUAyIG1haW5fcmV2ZWFsX3JvdXRlQDMKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fY29tbWl0X3JvdXRlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo1NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uTm9PcCwgT25Db21wbGV0ZUFjdGlvbi5PcHRJbl0pCiAgICBpbnQgMQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc2hsCiAgICBpbnQgMwogICAgJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBvbmUgb2YgTm9PcCwgT3B0SW4KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0NQogICAgLy8gY2xhc3MgVmVyaWZpYWJsZUdpdmVhd2F5KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo1NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uTm9PcCwgT25Db21wbGV0ZUFjdGlvbi5PcHRJbl0pCiAgICBjYWxsc3ViIGNvbW1pdAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9yZXZlYWxfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjgyCiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5Ob09wLCBPbkNvbXBsZXRlQWN0aW9uLkNsb3NlT3V0XSkKICAgIGludCAxCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBzaGwKICAgIGludCA1CiAgICAmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG9uZSBvZiBOb09wLCBDbG9zZU91dAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmV2ZWFsCiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgaW50IDQKICAgICsKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBieXRlIDB4MDAwNAogICAgc3dhcAogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHN3aXRjaCBtYWluX2NyZWF0ZUA3IG1haW5fcmVqZWN0X2JhcmVfb25fY29tcGxldGlvbkAxMCBtYWluX3JlamVjdF9iYXJlX29uX2NvbXBsZXRpb25AMTAgbWFpbl9yZWplY3RfYmFyZV9vbl9jb21wbGV0aW9uQDEwIG1haW5fdXBkYXRlQDggbWFpbl9kZWxldGVAOQogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKbWFpbl9jcmVhdGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fdXBkYXRlQDg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0OQogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLlVwZGF0ZUFwcGxpY2F0aW9uXSkKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0OS01MAogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLlVwZGF0ZUFwcGxpY2F0aW9uXSkKICAgIC8vIGRlZiB1cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIGNhbGxzdWIgdXBkYXRlCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2RlbGV0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTMKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTMtNTQKICAgIC8vIEBhcmM0LmJhcmVtZXRob2QoYWxsb3dfYWN0aW9ucz1bT25Db21wbGV0ZUFjdGlvbi5EZWxldGVBcHBsaWNhdGlvbl0pCiAgICAvLyBkZWYgZGVsZXRlKHNlbGYpIC0+IE5vbmU6CiAgICBjYWxsc3ViIGRlbGV0ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9yZWplY3RfYmFyZV9vbl9jb21wbGV0aW9uQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NDUKICAgIC8vIGNsYXNzIFZlcmlmaWFibGVHaXZlYXdheShBUkM0Q29udHJhY3QpOgogICAgZXJyIC8vIHJlamVjdCB0cmFuc2FjdGlvbgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZXJpZmlhYmxlX2dpdmVhd2F5LmNvbnRyYWN0LlZlcmlmaWFibGVHaXZlYXdheS5jb21taXQoZGVsYXk6IGJ5dGVzLCBwYXJ0aWNpcGFudHM6IGJ5dGVzLCB3aW5uZXJzOiBieXRlcykgLT4gdm9pZDoKY29tbWl0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTctNjAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLk5vT3AsIE9uQ29tcGxldGVBY3Rpb24uT3B0SW5dKQogICAgLy8gZGVmIGNvbW1pdCgKICAgIC8vICAgICBzZWxmLCBkZWxheTogYXJjNC5VSW50OCwgcGFydGljaXBhbnRzOiBhcmM0LlVJbnQ4LCB3aW5uZXJzOiBhcmM0LlVJbnQ4CiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjYxCiAgICAvLyBhc3NlcnQgVGVtcGxhdGVWYXJbVUludDY0XSgiU0FGRVRZX1JPVU5EX0dBUCIpIDw9IGRlbGF5Lm5hdGl2ZQogICAgZnJhbWVfZGlnIC0zCiAgICBidG9pCiAgICBkdXAKICAgIGludCBUTVBMX1NBRkVUWV9ST1VORF9HQVAKICAgID49CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjYzCiAgICAvLyBhc3NlcnQgMSA8PSB3aW5uZXJzLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0xCiAgICBidG9pCiAgICBkdXBuIDIKICAgIGludCAxCiAgICA+PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2NAogICAgLy8gYXNzZXJ0IDIgPD0gcGFydGljaXBhbnRzLm5hdGl2ZQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGludCAyCiAgICA+PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2Ni02NwogICAgLy8gIyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGNoZWNrIHRoYXQgcGFydGljaXBhbnRzIGlzIDw9IDI1NSBiZWNhdXNlIHBhcnRpY2lwYW50cyBpcyBhcmM0LlVJbnQ4CiAgICAvLyAod2lubmVycy5uYXRpdmUgPD0gMTYpCiAgICBpbnQgMTYKICAgIDw9CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2Ni03MAogICAgLy8gIyBXZSBkb24ndCBuZWVkIHRvIGFjdHVhbGx5IGNoZWNrIHRoYXQgcGFydGljaXBhbnRzIGlzIDw9IDI1NSBiZWNhdXNlIHBhcnRpY2lwYW50cyBpcyBhcmM0LlVJbnQ4CiAgICAvLyAod2lubmVycy5uYXRpdmUgPD0gMTYpCiAgICAvLyBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSA4MCBhbmQgd2lubmVycy5uYXRpdmUgPD0gMjApCiAgICAvLyBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSA0NyBhbmQgd2lubmVycy5uYXRpdmUgPD0gMjUpCiAgICAvLyBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSAzNSBhbmQgd2lubmVycy5uYXRpdmUgPD0gMzApCiAgICBibnogY29tbWl0X2Jvb2xfdHJ1ZUA3CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2OAogICAgLy8gb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gODAgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDIwKQogICAgZnJhbWVfZGlnIDIKICAgIGludCA4MAogICAgPD0KICAgIGJ6IGNvbW1pdF9vcl9jb250ZEAzCiAgICBmcmFtZV9kaWcgMQogICAgaW50IDIwCiAgICA8PQogICAgYm56IGNvbW1pdF9ib29sX3RydWVANwoKY29tbWl0X29yX2NvbnRkQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2OQogICAgLy8gb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gNDcgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDI1KQogICAgZnJhbWVfZGlnIDIKICAgIGludCA0NwogICAgPD0KICAgIGJ6IGNvbW1pdF9vcl9jb250ZEA1CiAgICBmcmFtZV9kaWcgMQogICAgaW50IDI1CiAgICA8PQogICAgYm56IGNvbW1pdF9ib29sX3RydWVANwoKY29tbWl0X29yX2NvbnRkQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3MAogICAgLy8gb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gMzUgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDMwKQogICAgZnJhbWVfZGlnIDIKICAgIGludCAzNQogICAgPD0KICAgIGJ6IGNvbW1pdF9ib29sX2ZhbHNlQDgKICAgIGZyYW1lX2RpZyAxCiAgICBpbnQgMzAKICAgIDw9CiAgICBieiBjb21taXRfYm9vbF9mYWxzZUA4Cgpjb21taXRfYm9vbF90cnVlQDc6CiAgICBpbnQgMQogICAgYiBjb21taXRfYm9vbF9tZXJnZUA5Cgpjb21taXRfYm9vbF9mYWxzZUA4OgogICAgaW50IDAKCmNvbW1pdF9ib29sX21lcmdlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo2NS03MQogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICAjIFdlIGRvbid0IG5lZWQgdG8gYWN0dWFsbHkgY2hlY2sgdGhhdCBwYXJ0aWNpcGFudHMgaXMgPD0gMjU1IGJlY2F1c2UgcGFydGljaXBhbnRzIGlzIGFyYzQuVUludDgKICAgIC8vICAgICAod2lubmVycy5uYXRpdmUgPD0gMTYpCiAgICAvLyAgICAgb3IgKHBhcnRpY2lwYW50cy5uYXRpdmUgPD0gODAgYW5kIHdpbm5lcnMubmF0aXZlIDw9IDIwKQogICAgLy8gICAgIG9yIChwYXJ0aWNpcGFudHMubmF0aXZlIDw9IDQ3IGFuZCB3aW5uZXJzLm5hdGl2ZSA8PSAyNSkKICAgIC8vICAgICBvciAocGFydGljaXBhbnRzLm5hdGl2ZSA8PSAzNSBhbmQgd2lubmVycy5uYXRpdmUgPD0gMzApCiAgICAvLyApCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjcyCiAgICAvLyBhc3NlcnQgd2lubmVycy5uYXRpdmUgPD0gcGFydGljaXBhbnRzLm5hdGl2ZQogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAyCiAgICA8PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3NgogICAgLy8gVHhuLnR4X2lkCiAgICB0eG4gVHhJRAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NzcKICAgIC8vICsgb3AuaXRvYihHbG9iYWwucm91bmQgKyBkZWxheS5uYXRpdmUpCiAgICBnbG9iYWwgUm91bmQKICAgIGZyYW1lX2RpZyAwCiAgICArCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3Ni03NwogICAgLy8gVHhuLnR4X2lkCiAgICAvLyArIG9wLml0b2IoR2xvYmFsLnJvdW5kICsgZGVsYXkubmF0aXZlKQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3Ni03OAogICAgLy8gVHhuLnR4X2lkCiAgICAvLyArIG9wLml0b2IoR2xvYmFsLnJvdW5kICsgZGVsYXkubmF0aXZlKQogICAgLy8gKyBwYXJ0aWNpcGFudHMuYnl0ZXMKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo3NC03NQogICAgLy8gIyBGSVhNRTogSXQgd291bGQgYmUgYmVzdCB0byB1c2UgYSBzdHJ1Y3Qgc28gdGhhdCB3ZSBoYXZlIGVhc2llciBkZWNvZGluZyBvZmYtY2hhaW4uCiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdID0gKAogICAgdHhuIFNlbmRlcgogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NzYtNzkKICAgIC8vIFR4bi50eF9pZAogICAgLy8gKyBvcC5pdG9iKEdsb2JhbC5yb3VuZCArIGRlbGF5Lm5hdGl2ZSkKICAgIC8vICsgcGFydGljaXBhbnRzLmJ5dGVzCiAgICAvLyArIHdpbm5lcnMuYnl0ZXMKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0NwogICAgLy8gc2VsZi5hY3RpdmVfY29tbWl0bWVudCA9IExvY2FsU3RhdGUoQnl0ZXMpCiAgICBieXRlICJhY3RpdmVfY29tbWl0bWVudCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5Ojc0LTgwCiAgICAvLyAjIEZJWE1FOiBJdCB3b3VsZCBiZSBiZXN0IHRvIHVzZSBhIHN0cnVjdCBzbyB0aGF0IHdlIGhhdmUgZWFzaWVyIGRlY29kaW5nIG9mZi1jaGFpbi4KICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl0gPSAoCiAgICAvLyAgICAgVHhuLnR4X2lkCiAgICAvLyAgICAgKyBvcC5pdG9iKEdsb2JhbC5yb3VuZCArIGRlbGF5Lm5hdGl2ZSkKICAgIC8vICAgICArIHBhcnRpY2lwYW50cy5ieXRlcwogICAgLy8gICAgICsgd2lubmVycy5ieXRlcwogICAgLy8gKQogICAgc3dhcAogICAgYXBwX2xvY2FsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlcmlmaWFibGVfZ2l2ZWF3YXkuY29udHJhY3QuVmVyaWZpYWJsZUdpdmVhd2F5LnJldmVhbCgpIC0+IGJ5dGVzLCBieXRlczoKcmV2ZWFsOgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODItODMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLk5vT3AsIE9uQ29tcGxldGVBY3Rpb24uQ2xvc2VPdXRdKQogICAgLy8gZGVmIHJldmVhbChzZWxmKSAtPiB0dXBsZVthcmM0LkR5bmFtaWNCeXRlcywgYXJjNC5EeW5hbWljQXJyYXlbYXJjNC5VSW50OF1dOgogICAgcHJvdG8gMCAyCiAgICBieXRlICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5Ojg0CiAgICAvLyBjb21taXR0ZWRfdHhfaWQgPSBhcmM0LkR5bmFtaWNCeXRlcyhzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdWzA6MzJdKQogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50ID0gTG9jYWxTdGF0ZShCeXRlcykKICAgIGJ5dGUgImFjdGl2ZV9jb21taXRtZW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODQKICAgIC8vIGNvbW1pdHRlZF90eF9pZCA9IGFyYzQuRHluYW1pY0J5dGVzKHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bMDozMl0pCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY3RpdmVfY29tbWl0bWVudCBleGlzdHMgZm9yIGFjY291bnQKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMAogICAgZGlnIDEKICAgID49CiAgICBpbnQgMAogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBzd2FwCiAgICBpbnQgMzIKICAgIGRpZyAxCiAgICA+PQogICAgaW50IDMyCiAgICBjb3ZlciAyCiAgICBzZWxlY3QKICAgIHN1YnN0cmluZzMKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdWzMyOjQwXQogICAgdHhuIFNlbmRlcgogICAgaW50IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50ID0gTG9jYWxTdGF0ZShCeXRlcykKICAgIGJ5dGUgImFjdGl2ZV9jb21taXRtZW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODYKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bMzI6NDBdCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hY3RpdmVfY29tbWl0bWVudCBleGlzdHMgZm9yIGFjY291bnQKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMzIKICAgIGRpZyAxCiAgICA+PQogICAgaW50IDMyCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIHN3YXAKICAgIGludCA0MAogICAgZGlnIDEKICAgID49CiAgICBpbnQgNDAKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgc3Vic3RyaW5nMwogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6ODkKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bNDA6NDFdCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NDcKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnQgPSBMb2NhbFN0YXRlKEJ5dGVzKQogICAgYnl0ZSAiYWN0aXZlX2NvbW1pdG1lbnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo4OQogICAgLy8gc2VsZi5hY3RpdmVfY29tbWl0bWVudFtUeG4uc2VuZGVyXVs0MDo0MV0KICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjdGl2ZV9jb21taXRtZW50IGV4aXN0cyBmb3IgYWNjb3VudAogICAgZHVwCiAgICBsZW4KICAgIGludCA0MAogICAgZGlnIDEKICAgID49CiAgICBpbnQgNDAKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgc3dhcAogICAgaW50IDQxCiAgICBkaWcgMQogICAgPj0KICAgIGludCA0MQogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBzdWJzdHJpbmczCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo4OC05MAogICAgLy8gY29tbWl0dGVkX3BhcnRpY2lwYW50cyA9IGFyYzQuVUludDguZnJvbV9ieXRlcygKICAgIC8vICAgICBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdWzQwOjQxXQogICAgLy8gKQogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6OTIKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl1bNDE6NDJdCiAgICB0eG4gU2VuZGVyCiAgICBpbnQgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NDcKICAgIC8vIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnQgPSBMb2NhbFN0YXRlKEJ5dGVzKQogICAgYnl0ZSAiYWN0aXZlX2NvbW1pdG1lbnQiCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5MgogICAgLy8gc2VsZi5hY3RpdmVfY29tbWl0bWVudFtUeG4uc2VuZGVyXVs0MTo0Ml0KICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFjdGl2ZV9jb21taXRtZW50IGV4aXN0cyBmb3IgYWNjb3VudAogICAgZHVwCiAgICBsZW4KICAgIGludCA0MQogICAgZGlnIDEKICAgID49CiAgICBpbnQgNDEKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgc3dhcAogICAgaW50IDQyCiAgICBkaWcgMQogICAgPj0KICAgIGludCA0MgogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBzdWJzdHJpbmczCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5NAogICAgLy8gZGVsIHNlbGYuYWN0aXZlX2NvbW1pdG1lbnRbVHhuLnNlbmRlcl0KICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBzZWxmLmFjdGl2ZV9jb21taXRtZW50ID0gTG9jYWxTdGF0ZShCeXRlcykKICAgIGJ5dGUgImFjdGl2ZV9jb21taXRtZW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6OTQKICAgIC8vIGRlbCBzZWxmLmFjdGl2ZV9jb21taXRtZW50W1R4bi5zZW5kZXJdCiAgICBhcHBfbG9jYWxfZGVsCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5NgogICAgLy8gYXNzZXJ0IEdsb2JhbC5yb3VuZCA+PSBjb21taXR0ZWRfYmxvY2submF0aXZlCiAgICBnbG9iYWwgUm91bmQKICAgIGRpZyAyCiAgICBidG9pCiAgICA+PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo5OC0xMDMKICAgIC8vIHZyZl9vdXRwdXQsIF90eG4gPSBhcmM0LmFiaV9jYWxsW2FyYzQuRHluYW1pY0J5dGVzXSgKICAgIC8vICAgICAibXVzdF9nZXQiLAogICAgLy8gICAgIGNvbW1pdHRlZF9ibG9jaywKICAgIC8vICAgICBjb21taXR0ZWRfdHhfaWQsCiAgICAvLyAgICAgYXBwX2lkPVRlbXBsYXRlVmFyW1VJbnQ2NF0oIlJBTkRPTU5FU1NfQkVBQ09OX0lEIiksCiAgICAvLyApCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxMDIKICAgIC8vIGFwcF9pZD1UZW1wbGF0ZVZhcltVSW50NjRdKCJSQU5ET01ORVNTX0JFQUNPTl9JRCIpLAogICAgaW50IFRNUExfUkFORE9NTkVTU19CRUFDT05fSUQKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6OTgtMTAzCiAgICAvLyB2cmZfb3V0cHV0LCBfdHhuID0gYXJjNC5hYmlfY2FsbFthcmM0LkR5bmFtaWNCeXRlc10oCiAgICAvLyAgICAgIm11c3RfZ2V0IiwKICAgIC8vICAgICBjb21taXR0ZWRfYmxvY2ssCiAgICAvLyAgICAgY29tbWl0dGVkX3R4X2lkLAogICAgLy8gICAgIGFwcF9pZD1UZW1wbGF0ZVZhcltVSW50NjRdKCJSQU5ET01ORVNTX0JFQUNPTl9JRCIpLAogICAgLy8gKQogICAgbWV0aG9kICJtdXN0X2dldCh1aW50NjQsYnl0ZVtdKWJ5dGVbXSIKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaW50IGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDQgMAogICAgc3dhcAogICAgZXh0cmFjdCAwIDQKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgPT0KICAgIGFzc2VydCAvLyBBUkM0IHByZWZpeCBpcyB2YWxpZAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTE2CiAgICAvLyBzdGF0ZTEsIHN0YXRlMiwgc3RhdGUzLCBzdGF0ZTQgPSBwY2cxMjhfaW5pdCh2cmZfb3V0cHV0Lm5hdGl2ZSkKICAgIGV4dHJhY3QgMiAwCiAgICBjYWxsc3ViIHBjZzEyOF9pbml0CiAgICBjb3ZlciA1CiAgICBjb3ZlciA0CiAgICBjb3ZlciAzCiAgICBjb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDAKICAgIC8vIClbOiBjb21taXR0ZWRfcGFydGljaXBhbnRzLm5hdGl2ZV0KICAgIHN3YXAKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTE4LTE0MAogICAgLy8gIyBLbnV0aCBzaHVmZmxlLgogICAgLy8gIyBXZSB1c2UgYSAidHJ1bmNhdGVkIiB2ZXJzaW9uIG9mIHRoZSBhbGdvcml0aG0gd2hlcmUgd2Ugc3RvcCBhZnRlciAid2lubmVycyIgaXRlcmF0aW9ucy4KICAgIC8vICMgVGhlIGFycmF5IHRvIGJlIHNodWZmbGVkIGlzIGFuIGFycmF5IHdpdGggdGhlIG51bWJlcnMgZnJvbSAxIHRvICJwYXJ0aWNpcGFudHMiLgogICAgLy8gIyBTaW5jZSB3ZSBoYXZlIGNvbnN0cmFpbmVkICJwYXJ0aWNpcGFudHMiLCB3ZSBjYW4gcG9wdWxhdGUgdGhlIGFycmF5IGluIGNvbnN0YW50IHRpbWUKICAgIC8vICMgIGJ5IHNsaWNpbmcgYSBwcmUtY29tcHV0ZWQgYnl0ZWFycmF5IHdpdGggbnVtYmVycyBmcm9tIDEgdG8gMjU1IChhcmM0LlVJbnQ4IG1heCB2YWx1ZSkuCiAgICAvLyBwYXJ0aWNpcGFudHMgPSBCeXRlcy5mcm9tX2hleCgKICAgIC8vICAgICAiMDEwMjAzMDQwNTA2MDcwODA5MGEwYjBjMGQwZTBmMTAiCiAgICAvLyAgICAgIjExMTIxMzE0MTUxNjE3MTgxOTFhMWIxYzFkMWUxZjIwIgogICAgLy8gICAgICIyMTIyMjMyNDI1MjYyNzI4MjkyYTJiMmMyZDJlMmYzMCIKICAgIC8vICAgICAiMzEzMjMzMzQzNTM2MzczODM5M2EzYjNjM2QzZTNmNDAiCiAgICAvLyAgICAgIjQxNDI0MzQ0NDU0NjQ3NDg0OTRhNGI0YzRkNGU0ZjUwIgogICAgLy8gICAgICI1MTUyNTM1NDU1NTY1NzU4NTk1YTViNWM1ZDVlNWY2MCIKICAgIC8vICAgICAiNjE2MjYzNjQ2NTY2Njc2ODY5NmE2YjZjNmQ2ZTZmNzAiCiAgICAvLyAgICAgIjcxNzI3Mzc0NzU3Njc3Nzg3OTdhN2I3YzdkN2U3ZjgwIgogICAgLy8gICAgICI4MTgyODM4NDg1ODY4Nzg4ODk4YThiOGM4ZDhlOGY5MCIKICAgIC8vICAgICAiOTE5MjkzOTQ5NTk2OTc5ODk5OWE5YjljOWQ5ZTlmYTAiCiAgICAvLyAgICAgImExYTJhM2E0YTVhNmE3YThhOWFhYWJhY2FkYWVhZmIwIgogICAgLy8gICAgICJiMWIyYjNiNGI1YjZiN2I4YjliYWJiYmNiZGJlYmZjMCIKICAgIC8vICAgICAiYzFjMmMzYzRjNWM2YzdjOGM5Y2FjYmNjY2RjZWNmZDAiCiAgICAvLyAgICAgImQxZDJkM2Q0ZDVkNmQ3ZDhkOWRhZGJkY2RkZGVkZmUwIgogICAgLy8gICAgICJlMWUyZTNlNGU1ZTZlN2U4ZTllYWViZWNlZGVlZWZmMCIKICAgIC8vICAgICAiZjFmMmYzZjRmNWY2ZjdmOGY5ZmFmYmZjZmRmZWZmIgogICAgLy8gKVs6IGNvbW1pdHRlZF9wYXJ0aWNpcGFudHMubmF0aXZlXQogICAgZHVwCiAgICBpbnQgMjU1CiAgICA+PQogICAgZGlnIDEKICAgIGludCAyNTUKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBieXRlIDB4MDEwMjAzMDQwNTA2MDcwODA5MGEwYjBjMGQwZTBmMTAxMTEyMTMxNDE1MTYxNzE4MTkxYTFiMWMxZDFlMWYyMDIxMjIyMzI0MjUyNjI3MjgyOTJhMmIyYzJkMmUyZjMwMzEzMjMzMzQzNTM2MzczODM5M2EzYjNjM2QzZTNmNDA0MTQyNDM0NDQ1NDY0NzQ4NDk0YTRiNGM0ZDRlNGY1MDUxNTI1MzU0NTU1NjU3NTg1OTVhNWI1YzVkNWU1ZjYwNjE2MjYzNjQ2NTY2Njc2ODY5NmE2YjZjNmQ2ZTZmNzA3MTcyNzM3NDc1NzY3Nzc4Nzk3YTdiN2M3ZDdlN2Y4MDgxODI4Mzg0ODU4Njg3ODg4OThhOGI4YzhkOGU4ZjkwOTE5MjkzOTQ5NTk2OTc5ODk5OWE5YjljOWQ5ZTlmYTBhMWEyYTNhNGE1YTZhN2E4YTlhYWFiYWNhZGFlYWZiMGIxYjJiM2I0YjViNmI3YjhiOWJhYmJiY2JkYmViZmMwYzFjMmMzYzRjNWM2YzdjOGM5Y2FjYmNjY2RjZWNmZDBkMWQyZDNkNGQ1ZDZkN2Q4ZDlkYWRiZGNkZGRlZGZlMGUxZTJlM2U0ZTVlNmU3ZThlOWVhZWJlY2VkZWVlZmYwZjFmMmYzZjRmNWY2ZjdmOGY5ZmFmYmZjZmRmZWZmCiAgICBpbnQgMAogICAgdW5jb3ZlciAyCiAgICBzdWJzdHJpbmczCiAgICBjb3ZlciAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDYtMTQ3CiAgICAvLyAjIFdlIGtub3cgdGhhdCwgYnkgY29uc3RydWN0aW9uLCAid2lubmVycyIgPD0gInBhcnRpY2lwYW50cyIuCiAgICAvLyBpZiBjb21taXR0ZWRfd2lubmVycy5uYXRpdmUgPCBjb21taXR0ZWRfcGFydGljaXBhbnRzLm5hdGl2ZQogICAgc3dhcAogICAgYnRvaQogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIDwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE0NS0xNDgKICAgIC8vIGNvbW1pdHRlZF93aW5uZXJzLm5hdGl2ZQogICAgLy8gIyBXZSBrbm93IHRoYXQsIGJ5IGNvbnN0cnVjdGlvbiwgIndpbm5lcnMiIDw9ICJwYXJ0aWNpcGFudHMiLgogICAgLy8gaWYgY29tbWl0dGVkX3dpbm5lcnMubmF0aXZlIDwgY29tbWl0dGVkX3BhcnRpY2lwYW50cy5uYXRpdmUKICAgIC8vIGVsc2UgY29tbWl0dGVkX3BhcnRpY2lwYW50cy5uYXRpdmUgLSAxCiAgICBieiByZXZlYWxfdGVybmFyeV9mYWxzZUAzCiAgICBmcmFtZV9kaWcgOQogICAgZnJhbWVfYnVyeSAxCiAgICBiIHJldmVhbF90ZXJuYXJ5X21lcmdlQDQKCnJldmVhbF90ZXJuYXJ5X2ZhbHNlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNDgKICAgIC8vIGVsc2UgY29tbWl0dGVkX3BhcnRpY2lwYW50cy5uYXRpdmUgLSAxCiAgICBmcmFtZV9kaWcgNwogICAgaW50IDEKICAgIC0KICAgIGZyYW1lX2J1cnkgMQoKcmV2ZWFsX3Rlcm5hcnlfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE1MC0xNTIKICAgIC8vICMgRklYTUU6IFdlIHNob3VsZCBjaGVjayBob3cgbXVjaCBmZWUgd2FzIHByb3ZpZGVkIGZvciB0aGlzIGNhbGwuIElmIGl0J3MgdG9vIG11Y2ggaXQncyBhIGRyYWluaW5nIGF0dGFjawogICAgLy8gIyAgYW5kIHRoZSBjb250cmFjdCBzaG91bGQgcHJvdGVjdCB0aGUgdXNlci9mdW5kaW5nIGFjY291bnQuCiAgICAvLyBlbnN1cmVfYnVkZ2V0KDcwMCAqIG5fc2h1ZmZsZXMsIE9wVXBGZWVTb3VyY2UuR3JvdXBDcmVkaXQpCiAgICBpbnQgNzAwCiAgICBmcmFtZV9kaWcgMQogICAgKgogICAgaW50IDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTUzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uobl9zaHVmZmxlcyk6CiAgICBpbnQgMAogICAgZnJhbWVfYnVyeSAwCgpyZXZlYWxfZm9yX2hlYWRlckA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTUzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2Uobl9zaHVmZmxlcyk6CiAgICBmcmFtZV9kaWcgMAogICAgZnJhbWVfZGlnIDEKICAgIDwKICAgIGJ6IHJldmVhbF9hZnRlcl9mb3JAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTU2CiAgICAvLyBCaWdVSW50KGkpLAogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTU3CiAgICAvLyBCaWdVSW50KGNvbW1pdHRlZF9wYXJ0aWNpcGFudHMubmF0aXZlKSwKICAgIGZyYW1lX2RpZyA3CiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNTQtMTU5CiAgICAvLyBzdGF0ZTEsIHN0YXRlMiwgc3RhdGUzLCBzdGF0ZTQsIHJfYnl0ZXMgPSBwY2cxMjhfcmFuZG9tKAogICAgLy8gICAgIChzdGF0ZTEsIHN0YXRlMiwgc3RhdGUzLCBzdGF0ZTQpLAogICAgLy8gICAgIEJpZ1VJbnQoaSksCiAgICAvLyAgICAgQmlnVUludChjb21taXR0ZWRfcGFydGljaXBhbnRzLm5hdGl2ZSksCiAgICAvLyAgICAgVUludDY0KDEpLAogICAgLy8gKQogICAgZnJhbWVfZGlnIDYKICAgIGZyYW1lX2RpZyA1CiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfZGlnIDMKICAgIHVuY292ZXIgNQogICAgdW5jb3ZlciA1CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNTgKICAgIC8vIFVJbnQ2NCgxKSwKICAgIGludCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNTQtMTU5CiAgICAvLyBzdGF0ZTEsIHN0YXRlMiwgc3RhdGUzLCBzdGF0ZTQsIHJfYnl0ZXMgPSBwY2cxMjhfcmFuZG9tKAogICAgLy8gICAgIChzdGF0ZTEsIHN0YXRlMiwgc3RhdGUzLCBzdGF0ZTQpLAogICAgLy8gICAgIEJpZ1VJbnQoaSksCiAgICAvLyAgICAgQmlnVUludChjb21taXR0ZWRfcGFydGljaXBhbnRzLm5hdGl2ZSksCiAgICAvLyAgICAgVUludDY0KDEpLAogICAgLy8gKQogICAgY2FsbHN1YiBwY2cxMjhfcmFuZG9tCiAgICBjb3ZlciA0CiAgICBmcmFtZV9idXJ5IDMKICAgIGZyYW1lX2J1cnkgNAogICAgZnJhbWVfYnVyeSA1CiAgICBmcmFtZV9idXJ5IDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE2MAogICAgLy8gciA9IG9wLmdldGJ5dGUocl9ieXRlcywgMTcpCiAgICBpbnQgMTcKICAgIGdldGJ5dGUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE2MQogICAgLy8gcGFydGljaXBhbnRzX2kgPSBvcC5nZXRieXRlKHBhcnRpY2lwYW50cywgaSkKICAgIGZyYW1lX2RpZyA4CiAgICBkdXAKICAgIGRpZyAzCiAgICBnZXRieXRlCiAgICBjb3ZlciAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNjIKICAgIC8vIHBhcnRpY2lwYW50c19yID0gb3AuZ2V0Ynl0ZShwYXJ0aWNpcGFudHMsIHIpCiAgICBkdXAKICAgIGRpZyAyCiAgICBnZXRieXRlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNjMKICAgIC8vIHBhcnRpY2lwYW50cyA9IG9wLnNldGJ5dGUocGFydGljaXBhbnRzLCBpLCBwYXJ0aWNpcGFudHNfcikKICAgIGRpZyAzCiAgICBzd2FwCiAgICBzZXRieXRlCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNjQKICAgIC8vIHBhcnRpY2lwYW50cyA9IG9wLnNldGJ5dGUocGFydGljaXBhbnRzLCByLCBwYXJ0aWNpcGFudHNfaSkKICAgIHN3YXAKICAgIHVuY292ZXIgMwogICAgc2V0Ynl0ZQogICAgZnJhbWVfYnVyeSA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNTMKICAgIC8vIGZvciBpIGluIHVyYW5nZShuX3NodWZmbGVzKToKICAgIGludCAxCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgcmV2ZWFsX2Zvcl9oZWFkZXJANQoKcmV2ZWFsX2FmdGVyX2ZvckA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTY3CiAgICAvLyBhcmM0LlVJbnQxNihjb21taXR0ZWRfd2lubmVycy5uYXRpdmUpLmJ5dGVzCiAgICBmcmFtZV9kaWcgOQogICAgZHVwCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6MTY4CiAgICAvLyArIHBhcnRpY2lwYW50c1s6IGNvbW1pdHRlZF93aW5uZXJzLm5hdGl2ZV0KICAgIGZyYW1lX2RpZyA4CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGxlbgogICAgZHVwMgogICAgPj0KICAgIHNlbGVjdAogICAgaW50IDAKICAgIHN3YXAKICAgIHN1YnN0cmluZzMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjE2Ny0xNjgKICAgIC8vIGFyYzQuVUludDE2KGNvbW1pdHRlZF93aW5uZXJzLm5hdGl2ZSkuYnl0ZXMKICAgIC8vICsgcGFydGljaXBhbnRzWzogY29tbWl0dGVkX3dpbm5lcnMubmF0aXZlXQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weToxNjYtMTY5CiAgICAvLyByZXR1cm4gY29tbWl0dGVkX3R4X2lkLmNvcHkoKSwgYXJjNC5EeW5hbWljQXJyYXlbYXJjNC5VSW50OF0uZnJvbV9ieXRlcygKICAgIC8vICAgICBhcmM0LlVJbnQxNihjb21taXR0ZWRfd2lubmVycy5uYXRpdmUpLmJ5dGVzCiAgICAvLyAgICAgKyBwYXJ0aWNpcGFudHNbOiBjb21taXR0ZWRfd2lubmVycy5uYXRpdmVdCiAgICAvLyApCiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfYnVyeSAwCiAgICBmcmFtZV9idXJ5IDEKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cueHNoX3JyX3F1YWRydXBsZV82NF8zMi5wY2cxMjhfaW5pdChzZWVkOiBieXRlcykgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0OgpwY2cxMjhfaW5pdDoKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxNy0xOAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBwY2cxMjhfaW5pdChzZWVkOiBCeXRlcykgLT4gdHVwbGVbVUludDY0LCBVSW50NjQsIFVJbnQ2NCwgVUludDY0XToKICAgIHByb3RvIDEgNAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjE5CiAgICAvLyBhc3NlcnQgc2VlZC5sZW5ndGggPT0gMzIKICAgIGZyYW1lX2RpZyAtMQogICAgbGVuCiAgICBpbnQgMzIKICAgID09CiAgICBhc3NlcnQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToyMgogICAgLy8gX19wY2czMl9pbml0KG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDApLCBVSW50NjQoUENHX0RFRkFVTFRfSU5DUkVNRU5UKSksCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MDcKICAgIGNhbGxzdWIgX19wY2czMl9pbml0CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MjQKICAgIC8vIG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDgpLCBVSW50NjQoUENHX1NFQ09OREFSWV9ERUZBVUxUX0lOQ1JFTUVOVCkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwOQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjIzLTI1CiAgICAvLyBfX3BjZzMyX2luaXQoCiAgICAvLyAgICAgb3AuZXh0cmFjdF91aW50NjQoc2VlZCwgOCksIFVJbnQ2NChQQ0dfU0VDT05EQVJZX0RFRkFVTFRfSU5DUkVNRU5UKQogICAgLy8gKSwKICAgIGNhbGxzdWIgX19wY2czMl9pbml0CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MjcKICAgIC8vIG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDE2KSwgVUludDY0KFBDR19URVJUSUFSWV9ERUZBVUxUX0lOQ1JFTUVOVCkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MTEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToyNi0yOAogICAgLy8gX19wY2czMl9pbml0KAogICAgLy8gICAgIG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDE2KSwgVUludDY0KFBDR19URVJUSUFSWV9ERUZBVUxUX0lOQ1JFTUVOVCkKICAgIC8vICksCiAgICBjYWxsc3ViIF9fcGNnMzJfaW5pdAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjMwCiAgICAvLyBvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCAyNCksIFVJbnQ2NChQQ0dfUVVBVEVSTkFSWV9ERUZBVUxUX0lOQ1JFTUVOVCkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDI0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MTMKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToyOS0zMQogICAgLy8gX19wY2czMl9pbml0KAogICAgLy8gICAgIG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDI0KSwgVUludDY0KFBDR19RVUFURVJOQVJZX0RFRkFVTFRfSU5DUkVNRU5UKQogICAgLy8gKSwKICAgIGNhbGxzdWIgX19wY2czMl9pbml0CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MjEtMzIKICAgIC8vIHJldHVybiAoCiAgICAvLyAgICAgX19wY2czMl9pbml0KG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDApLCBVSW50NjQoUENHX0RFRkFVTFRfSU5DUkVNRU5UKSksCiAgICAvLyAgICAgX19wY2czMl9pbml0KAogICAgLy8gICAgICAgICBvcC5leHRyYWN0X3VpbnQ2NChzZWVkLCA4KSwgVUludDY0KFBDR19TRUNPTkRBUllfREVGQVVMVF9JTkNSRU1FTlQpCiAgICAvLyAgICAgKSwKICAgIC8vICAgICBfX3BjZzMyX2luaXQoCiAgICAvLyAgICAgICAgIG9wLmV4dHJhY3RfdWludDY0KHNlZWQsIDE2KSwgVUludDY0KFBDR19URVJUSUFSWV9ERUZBVUxUX0lOQ1JFTUVOVCkKICAgIC8vICAgICApLAogICAgLy8gICAgIF9fcGNnMzJfaW5pdCgKICAgIC8vICAgICAgICAgb3AuZXh0cmFjdF91aW50NjQoc2VlZCwgMjQpLCBVSW50NjQoUENHX1FVQVRFUk5BUllfREVGQVVMVF9JTkNSRU1FTlQpCiAgICAvLyAgICAgKSwKICAgIC8vICkKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cueHNoX3JyXzY0XzMyLl9fcGNnMzJfaW5pdChpbml0aWFsX3N0YXRlOiB1aW50NjQsIGluY3I6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyX2luaXQ6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo2MS02MgogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfX3BjZzMyX2luaXQoaW5pdGlhbF9zdGF0ZTogVUludDY0LCBpbmNyOiBVSW50NjQpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDIgMQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfNjRfMzIucHk6NjMKICAgIC8vIHN0YXRlID0gX19wY2czMl9zdGVwKFVJbnQ2NCgwKSwgaW5jcikKICAgIGludCAwCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo2NAogICAgLy8gX2hpZ2hfYWRkdywgc3RhdGUgPSBvcC5hZGR3KHN0YXRlLCBpbml0aWFsX3N0YXRlKQogICAgZnJhbWVfZGlnIC0yCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjY2CiAgICAvLyByZXR1cm4gX19wY2czMl9zdGVwKHN0YXRlLCBpbmNyKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy54c2hfcnJfNjRfMzIuX19wY2czMl9zdGVwKHN0YXRlOiB1aW50NjQsIGluY3I6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyX3N0ZXA6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo2OS03MAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfX3BjZzMyX3N0ZXAoc3RhdGU6IFVJbnQ2NCwgaW5jcjogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAyIDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjcxCiAgICAvLyBfaGlnaF9tdWwsIGxvd19tdWwgPSBvcC5tdWx3KHN0YXRlLCBQQ0dfREVGQVVMVF9NVUxUSVBMSUVSKQogICAgZnJhbWVfZGlnIC0yCiAgICBpbnQgNjM2NDEzNjIyMzg0Njc5MzAwNQogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo3MgogICAgLy8gX2hpZ2hfYWRkLCBsb3dfYWRkID0gb3AuYWRkdyhsb3dfbXVsLCBpbmNyKQogICAgZnJhbWVfZGlnIC0xCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyXzY0XzMyLnB5Ojc0CiAgICAvLyByZXR1cm4gbG93X2FkZAogICAgcmV0c3ViCgoKLy8gYWxnb3B5LmVuc3VyZV9idWRnZXQocmVxdWlyZWRfYnVkZ2V0OiB1aW50NjQsIGZlZV9zb3VyY2U6IHVpbnQ2NCkgLT4gdm9pZDoKZW5zdXJlX2J1ZGdldDoKICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToxMS0xNwogICAgcHJvdG8gMiAwCiAgICAvLyA8YWxnb3B5Pi9hbGdvcHkucHk6MTgKICAgIGZyYW1lX2RpZyAtMgogICAgaW50IDEwCiAgICArCgplbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxOgogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjE5CiAgICBmcmFtZV9kaWcgMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3CiAgICAvLyA8YWxnb3B5Pi9hbGdvcHkucHk6MjAKICAgIGl0eG5fYmVnaW4KICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyMQogICAgaW50IGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyMgogICAgaW50IERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjIzCiAgICBieXRlIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIEFwcHJvdmFsUHJvZ3JhbQogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjI0CiAgICBieXRlIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICAvLyA8YWxnb3B5Pi9hbGdvcHkucHk6MjUtMjkKICAgIGZyYW1lX2RpZyAtMQogICAgc3dpdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMzoKICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyNwogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzFANDoKICAgIC8vIDxhbGdvcHk+L2FsZ29weS5weToyOQogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgaXR4bl9maWVsZCBGZWUKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2OgogICAgLy8gPGFsZ29weT4vYWxnb3B5LnB5OjMwCiAgICBpdHhuX3N1Ym1pdAogICAgYiBlbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxCgplbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDc6CiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl9xdWFkcnVwbGVfNjRfMzIucGNnMTI4X3JhbmRvbShzdGF0ZS4wOiB1aW50NjQsIHN0YXRlLjE6IHVpbnQ2NCwgc3RhdGUuMjogdWludDY0LCBzdGF0ZS4zOiB1aW50NjQsIGxvd2VyX2JvdW5kOiBieXRlcywgdXBwZXJfYm91bmQ6IGJ5dGVzLCBsZW5ndGg6IHVpbnQ2NCkgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCBieXRlczoKcGNnMTI4X3JhbmRvbToKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo5Mi05OAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBwY2cxMjhfcmFuZG9tKAogICAgLy8gICAgIHN0YXRlOiB0dXBsZVtVSW50NjQsIFVJbnQ2NCwgVUludDY0LCBVSW50NjRdLAogICAgLy8gICAgIGxvd2VyX2JvdW5kOiBCaWdVSW50LAogICAgLy8gICAgIHVwcGVyX2JvdW5kOiBCaWdVSW50LAogICAgLy8gICAgIGxlbmd0aDogVUludDY0LAogICAgLy8gKSAtPiB0dXBsZVtVSW50NjQsIFVJbnQ2NCwgVUludDY0LCBVSW50NjQsIEJ5dGVzXToKICAgIHByb3RvIDcgNQogICAgaW50IDAKICAgIGR1cG4gMgogICAgYnl0ZSAiIgogICAgZHVwbiA0CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTAxCiAgICAvLyBhc3NlcnQgbGVuZ3RoIDwgMioqMTYKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDY1NTM2CiAgICA8CiAgICBhc3NlcnQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMDIKICAgIC8vIHJlc3VsdCArPSBhcmM0LlVJbnQxNihsZW5ndGgpLmJ5dGVzCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTA1CiAgICAvLyBpZiBsb3dlcl9ib3VuZCA9PSAwIGFuZCB1cHBlcl9ib3VuZCA9PSAwOgogICAgZnJhbWVfZGlnIC0zCiAgICBieXRlIDB4CiAgICBiPT0KICAgIGJ6IHBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDcKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZSAweAogICAgYj09CiAgICBieiBwY2cxMjhfcmFuZG9tX2Vsc2VfYm9keUA3CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTA2CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UobGVuZ3RoKTogICMgbm9xYTogQjAwNwogICAgaW50IDAKICAgIGZyYW1lX2J1cnkgMwogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9idXJ5IDcKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfYnVyeSA2CiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2J1cnkgNQogICAgZnJhbWVfZGlnIC03CiAgICBmcmFtZV9idXJ5IDQKCnBjZzEyOF9yYW5kb21fZm9yX2hlYWRlckAzOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEwNgogICAgLy8gZm9yIGkgaW4gdXJhbmdlKGxlbmd0aCk6ICAjIG5vcWE6IEIwMDcKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgLTEKICAgIDwKICAgIGJ6IHBjZzEyOF9yYW5kb21fYWZ0ZXJfaWZfZWxzZUAyMAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEwNy0xMDkKICAgIC8vIHN0YXRlMSwgc3RhdGUyLCBzdGF0ZTMsIHN0YXRlNCwgbiA9IF9fcGNnMTI4X3JhbmRvbSgKICAgIC8vICAgICAoc3RhdGUxLCBzdGF0ZTIsIHN0YXRlMywgc3RhdGU0KQogICAgLy8gKQogICAgZnJhbWVfZGlnIDQKICAgIGZyYW1lX2RpZyA1CiAgICBmcmFtZV9kaWcgNgogICAgZnJhbWVfZGlnIDcKICAgIGNhbGxzdWIgX19wY2cxMjhfcmFuZG9tCiAgICBjb3ZlciA0CiAgICBmcmFtZV9idXJ5IDcKICAgIGZyYW1lX2J1cnkgNgogICAgZnJhbWVfYnVyeSA1CiAgICBmcmFtZV9idXJ5IDQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMTEKICAgIC8vIHJlc3VsdCArPSBuLmJ5dGVzCiAgICBmcmFtZV9kaWcgOAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDgKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMDYKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBwY2cxMjhfcmFuZG9tX2Zvcl9oZWFkZXJAMwoKcGNnMTI4X3JhbmRvbV9lbHNlX2JvZHlANzoKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMTMKICAgIC8vIGlmIHVwcGVyX2JvdW5kICE9IDA6CiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGUgMHgKICAgIGIhPQogICAgYnogcGNnMTI4X3JhbmRvbV9lbHNlX2JvZHlAOQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjExNAogICAgLy8gYXNzZXJ0IHVwcGVyX2JvdW5kID4gQmlnVUludCgxKQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4MDEKICAgIGI+CiAgICBhc3NlcnQKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMTUKICAgIC8vIGFzc2VydCB1cHBlcl9ib3VuZCA8IEJpZ1VJbnQoMioqMTI4KQogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4MDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgYjwKICAgIGFzc2VydAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjExNgogICAgLy8gYXNzZXJ0IGxvd2VyX2JvdW5kIDwgdXBwZXJfYm91bmQgLSBCaWdVSW50KDEpCiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGUgMHgwMQogICAgYi0KICAgIGZyYW1lX2RpZyAtMwogICAgYj4KICAgIGFzc2VydAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjExOAogICAgLy8gYWJzb2x1dGVfYm91bmQgPSB1cHBlcl9ib3VuZCAtIGxvd2VyX2JvdW5kCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMwogICAgYi0KICAgIGZyYW1lX2J1cnkgMAogICAgYiBwY2cxMjhfcmFuZG9tX2FmdGVyX2lmX2Vsc2VAMTAKCnBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDk6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTIwCiAgICAvLyBhc3NlcnQgbG93ZXJfYm91bmQgPCBCaWdVSW50KDIqKjEyOCAtIDEpCiAgICBmcmFtZV9kaWcgLTMKICAgIGJ5dGUgMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZgogICAgYjwKICAgIGFzc2VydAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEyMgogICAgLy8gYWJzb2x1dGVfYm91bmQgPSBCaWdVSW50KDIqKjEyOCkgLSBsb3dlcl9ib3VuZAogICAgYnl0ZSAweDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGZyYW1lX2RpZyAtMwogICAgYi0KICAgIGZyYW1lX2J1cnkgMAoKcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEyNAogICAgLy8gdGhyZXNob2xkID0gX19wY2cxMjhfdHdvcyhhYnNvbHV0ZV9ib3VuZCkgJSBhYnNvbHV0ZV9ib3VuZAogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgY2FsbHN1YiBfX3BjZzEyOF90d29zCiAgICBzd2FwCiAgICBiJQogICAgZnJhbWVfYnVyeSAyCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTI2CiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UobGVuZ3RoKTogICMgbm9xYTogQjAwNwogICAgaW50IDAKICAgIGZyYW1lX2J1cnkgMwogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9idXJ5IDcKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfYnVyeSA2CiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2J1cnkgNQogICAgZnJhbWVfZGlnIC03CiAgICBmcmFtZV9idXJ5IDQKCnBjZzEyOF9yYW5kb21fZm9yX2hlYWRlckAxMToKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMjYKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIC0xCiAgICA8CiAgICBieiBwY2cxMjhfcmFuZG9tX2FmdGVyX2ZvckAxOQoKcGNnMTI4X3JhbmRvbV93aGlsZV90b3BAMTM6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTI4LTEzMAogICAgLy8gc3RhdGUxLCBzdGF0ZTIsIHN0YXRlMywgc3RhdGU0LCBjYW5kaWRhdGUgPSBfX3BjZzEyOF9yYW5kb20oCiAgICAvLyAgICAgKHN0YXRlMSwgc3RhdGUyLCBzdGF0ZTMsIHN0YXRlNCkKICAgIC8vICkKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9kaWcgNQogICAgZnJhbWVfZGlnIDYKICAgIGZyYW1lX2RpZyA3CiAgICBjYWxsc3ViIF9fcGNnMTI4X3JhbmRvbQogICAgZHVwCiAgICBjb3ZlciA1CiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2J1cnkgNwogICAgZnJhbWVfYnVyeSA2CiAgICBmcmFtZV9idXJ5IDUKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEzMQogICAgLy8gaWYgY2FuZGlkYXRlID49IHRocmVzaG9sZDoKICAgIGZyYW1lX2RpZyAyCiAgICBiPj0KICAgIGJ6IHBjZzEyOF9yYW5kb21fd2hpbGVfdG9wQDEzCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MTMzCiAgICAvLyByZXN1bHQgKz0gYXJjNC5VSW50MTI4KChjYW5kaWRhdGUgJSBhYnNvbHV0ZV9ib3VuZCkgKyBsb3dlcl9ib3VuZCkuYnl0ZXMKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgMAogICAgYiUKICAgIGZyYW1lX2RpZyAtMwogICAgYisKICAgIGR1cAogICAgbGVuCiAgICBpbnQgMTYKICAgIDw9CiAgICBhc3NlcnQgLy8gb3ZlcmZsb3cKICAgIGludCAxNgogICAgYnplcm8KICAgIGJ8CiAgICBmcmFtZV9kaWcgOAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDgKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weToxMjYKICAgIC8vIGZvciBpIGluIHVyYW5nZShsZW5ndGgpOiAgIyBub3FhOiBCMDA3CiAgICBmcmFtZV9kaWcgMwogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBwY2cxMjhfcmFuZG9tX2Zvcl9oZWFkZXJAMTEKCnBjZzEyOF9yYW5kb21fYWZ0ZXJfZm9yQDE5OgoKcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDIwOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjEzNQogICAgLy8gcmV0dXJuIHN0YXRlMSwgc3RhdGUyLCBzdGF0ZTMsIHN0YXRlNCwgcmVzdWx0CiAgICBmcmFtZV9kaWcgNAogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2RpZyA2CiAgICBmcmFtZV9kaWcgNwogICAgZnJhbWVfZGlnIDgKICAgIGZyYW1lX2J1cnkgNAogICAgZnJhbWVfYnVyeSAzCiAgICBmcmFtZV9idXJ5IDIKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAwCiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl9xdWFkcnVwbGVfNjRfMzIuX19wY2cxMjhfcmFuZG9tKHN0YXRlLjA6IHVpbnQ2NCwgc3RhdGUuMTogdWludDY0LCBzdGF0ZS4yOiB1aW50NjQsIHN0YXRlLjM6IHVpbnQ2NCkgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCBieXRlczoKX19wY2cxMjhfcmFuZG9tOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjM1LTM4CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMTI4X3JhbmRvbSgKICAgIC8vICAgICBzdGF0ZTogdHVwbGVbVUludDY0LCBVSW50NjQsIFVJbnQ2NCwgVUludDY0XQogICAgLy8gKSAtPiB0dXBsZVtVSW50NjQsIFVJbnQ2NCwgVUludDY0LCBVSW50NjQsIEJpZ1VJbnRdOgogICAgcHJvdG8gNCA1CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6MzkKICAgIC8vIG5ld19zdGF0ZTEsIHJuMSA9IF9fcGNnMzJfcmFuZG9tKHN0YXRlWzBdKQogICAgZnJhbWVfZGlnIC00CiAgICBjYWxsc3ViIF9fcGNnMzJfcmFuZG9tCiAgICBzd2FwCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NDIKICAgIC8vIFVJbnQ2NCgwKSBpZiBuZXdfc3RhdGUxICE9IDAgZWxzZSBVSW50NjQoMSkKICAgIGR1cAogICAgIQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjQxCiAgICAvLyBjb25kX2luY3IgPSBQQ0dfU0VDT05EQVJZX0RFRkFVTFRfSU5DUkVNRU5UIDw8ICgKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDA5CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NDEtNDMKICAgIC8vIGNvbmRfaW5jciA9IFBDR19TRUNPTkRBUllfREVGQVVMVF9JTkNSRU1FTlQgPDwgKAogICAgLy8gICAgIFVJbnQ2NCgwKSBpZiBuZXdfc3RhdGUxICE9IDAgZWxzZSBVSW50NjQoMSkKICAgIC8vICkKICAgIHN3YXAKICAgIHNobAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjQ0CiAgICAvLyBuZXdfc3RhdGUyID0gX19wY2czMl9zdGVwKHN0YXRlWzFdLCBjb25kX2luY3IpCiAgICBmcmFtZV9kaWcgLTMKICAgIHN3YXAKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NDcKICAgIC8vIFVJbnQ2NCgwKSBpZiBuZXdfc3RhdGUyICE9IDAgZWxzZSBVSW50NjQoMSkKICAgIGR1cAogICAgIQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjQ2CiAgICAvLyBjb25kX2luY3IgPSBQQ0dfVEVSVElBUllfREVGQVVMVF9JTkNSRU1FTlQgPDwgKAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MTEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo0Ni00OAogICAgLy8gY29uZF9pbmNyID0gUENHX1RFUlRJQVJZX0RFRkFVTFRfSU5DUkVNRU5UIDw8ICgKICAgIC8vICAgICBVSW50NjQoMCkgaWYgbmV3X3N0YXRlMiAhPSAwIGVsc2UgVUludDY0KDEpCiAgICAvLyApCiAgICBzd2FwCiAgICBzaGwKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo0OQogICAgLy8gbmV3X3N0YXRlMyA9IF9fcGNnMzJfc3RlcChzdGF0ZVsyXSwgY29uZF9pbmNyKQogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjUyCiAgICAvLyBVSW50NjQoMCkgaWYgbmV3X3N0YXRlMyAhPSAwIGVsc2UgVUludDY0KDEpCiAgICBkdXAKICAgICEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo1MQogICAgLy8gY29uZF9pbmNyID0gUENHX1FVQVRFUk5BUllfREVGQVVMVF9JTkNSRU1FTlQgPDwgKAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MTMKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo1MS01MwogICAgLy8gY29uZF9pbmNyID0gUENHX1FVQVRFUk5BUllfREVGQVVMVF9JTkNSRU1FTlQgPDwgKAogICAgLy8gICAgIFVJbnQ2NCgwKSBpZiBuZXdfc3RhdGUzICE9IDAgZWxzZSBVSW50NjQoMSkKICAgIC8vICkKICAgIHN3YXAKICAgIHNobAogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5OjU0CiAgICAvLyBuZXdfc3RhdGU0ID0gX19wY2czMl9zdGVwKHN0YXRlWzNdLCBjb25kX2luY3IpCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3YXAKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICBzd2FwCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NjIKICAgIC8vIG9wLml0b2Iocm4xIDw8IDMyIHwgX19wY2czMl9vdXRwdXQoc3RhdGVbMV0pKQogICAgdW5jb3ZlciA0CiAgICBpbnQgMzIKICAgIHNobAogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9fcGNnMzJfb3V0cHV0CiAgICB8CiAgICBpdG9iCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NjMKICAgIC8vICsgb3AuaXRvYihfX3BjZzMyX291dHB1dChzdGF0ZVsyXSkgPDwgMzIgfCBfX3BjZzMyX291dHB1dChzdGF0ZVszXSkpCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgX19wY2czMl9vdXRwdXQKICAgIGludCAzMgogICAgc2hsCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX19wY2czMl9vdXRwdXQKICAgIHwKICAgIGl0b2IKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo2Mi02MwogICAgLy8gb3AuaXRvYihybjEgPDwgMzIgfCBfX3BjZzMyX291dHB1dChzdGF0ZVsxXSkpCiAgICAvLyArIG9wLml0b2IoX19wY2czMl9vdXRwdXQoc3RhdGVbMl0pIDw8IDMyIHwgX19wY2czMl9vdXRwdXQoc3RhdGVbM10pKQogICAgY29uY2F0CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NTYtNjUKICAgIC8vIHJldHVybiAoCiAgICAvLyAgICAgbmV3X3N0YXRlMSwKICAgIC8vICAgICBuZXdfc3RhdGUyLAogICAgLy8gICAgIG5ld19zdGF0ZTMsCiAgICAvLyAgICAgbmV3X3N0YXRlNCwKICAgIC8vICAgICBCaWdVSW50LmZyb21fYnl0ZXMoCiAgICAvLyAgICAgICAgIG9wLml0b2Iocm4xIDw8IDMyIHwgX19wY2czMl9vdXRwdXQoc3RhdGVbMV0pKQogICAgLy8gICAgICAgICArIG9wLml0b2IoX19wY2czMl9vdXRwdXQoc3RhdGVbMl0pIDw8IDMyIHwgX19wY2czMl9vdXRwdXQoc3RhdGVbM10pKQogICAgLy8gICAgICksCiAgICAvLyApCiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciAzCiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy54c2hfcnJfNjRfMzIuX19wY2czMl9yYW5kb20oc3RhdGU6IHVpbnQ2NCkgLT4gdWludDY0LCB1aW50NjQ6Cl9fcGNnMzJfcmFuZG9tOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfNjRfMzIucHk6NzctNzgKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX19wY2czMl9yYW5kb20oc3RhdGU6IFVJbnQ2NCkgLT4gdHVwbGVbVUludDY0LCBVSW50NjRdOgogICAgcHJvdG8gMSAyCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo3OQogICAgLy8gcmV0dXJuIF9fcGNnMzJfc3RlcChzdGF0ZSwgVUludDY0KFBDR19ERUZBVUxUX0lOQ1JFTUVOVCkpLCBfX3BjZzMyX291dHB1dChzdGF0ZSkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MDcKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX19wY2czMl9vdXRwdXQKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cueHNoX3JyXzY0XzMyLl9fcGNnMzJfb3V0cHV0KHZhbHVlOiB1aW50NjQpIC0+IHVpbnQ2NDoKX19wY2czMl9vdXRwdXQ6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo4Mi04MwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfX3BjZzMyX291dHB1dCh2YWx1ZTogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyXzY0XzMyLnB5Ojg1CiAgICAvLyBfX21hc2tfdG9fMzJiaXRzKCgodmFsdWUgPj4gMTgpIF4gdmFsdWUpID4+IDI3KSwgdmFsdWUgPj4gNTkKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDE4CiAgICBzaHIKICAgIGZyYW1lX2RpZyAtMQogICAgXgogICAgaW50IDI3CiAgICBzaHIKICAgIGNhbGxzdWIgX19tYXNrX3RvXzMyYml0cwogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgNTkKICAgIHNocgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfNjRfMzIucHk6ODQtODYKICAgIC8vIHJldHVybiBfX3BjZzMyX3JvdGF0aW9uKAogICAgLy8gICAgIF9fbWFza190b18zMmJpdHMoKCh2YWx1ZSA+PiAxOCkgXiB2YWx1ZSkgPj4gMjcpLCB2YWx1ZSA+PiA1OQogICAgLy8gKQogICAgY2FsbHN1YiBfX3BjZzMyX3JvdGF0aW9uCiAgICByZXRzdWIKCgovLyBsaWJfcGNnLnhzaF9ycl82NF8zMi5fX21hc2tfdG9fMzJiaXRzKHZhbHVlOiB1aW50NjQpIC0+IHVpbnQ2NDoKX19tYXNrX3RvXzMyYml0czoKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjEwMS0xMDIKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX19tYXNrX3RvXzMyYml0cyh2YWx1ZTogVUludDY0KSAtPiBVSW50NjQ6CiAgICBwcm90byAxIDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyXzY0XzMyLnB5OjEwMwogICAgLy8gcmV0dXJuIHZhbHVlICYgKCgyKiozMikgLSAxKQogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgNDI5NDk2NzI5NQogICAgJgogICAgcmV0c3ViCgoKLy8gbGliX3BjZy54c2hfcnJfNjRfMzIuX19wY2czMl9yb3RhdGlvbih2YWx1ZTogdWludDY0LCByb3Q6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyX3JvdGF0aW9uOgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfNjRfMzIucHk6ODktOTAKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgX19wY2czMl9yb3RhdGlvbih2YWx1ZTogVUludDY0LCByb3Q6IFVJbnQ2NCkgLT4gVUludDY0OgogICAgcHJvdG8gMiAxCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo5MQogICAgLy8gcmV0dXJuICh2YWx1ZSA+PiByb3QpIHwgX19tYXNrX3RvXzMyYml0cyh2YWx1ZSA8PCAoX191aW50NjRfdHdvcyhyb3QpICYgMzEpKQogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTEKICAgIHNocgogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9fdWludDY0X3R3b3MKICAgIGludCAzMQogICAgJgogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBzaGwKICAgIGNhbGxzdWIgX19tYXNrX3RvXzMyYml0cwogICAgfAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy54c2hfcnJfNjRfMzIuX191aW50NjRfdHdvcyh2YWx1ZTogdWludDY0KSAtPiB1aW50NjQ6Cl9fdWludDY0X3R3b3M6CiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl82NF8zMi5weTo5NC05NQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfX3VpbnQ2NF90d29zKHZhbHVlOiBVSW50NjQpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfNjRfMzIucHk6OTYKICAgIC8vIGFkZHdfaGlnaCwgYWRkd19sb3cgPSBvcC5hZGR3KH52YWx1ZSwgMSkKICAgIGZyYW1lX2RpZyAtMQogICAgfgogICAgaW50IDEKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfNjRfMzIucHk6OTgKICAgIC8vIHJldHVybiBhZGR3X2xvdwogICAgcmV0c3ViCgoKLy8gbGliX3BjZy54c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLl9fcGNnMTI4X3R3b3ModmFsdWU6IGJ5dGVzKSAtPiBieXRlczoKX19wY2cxMjhfdHdvczoKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo2OC03MwogICAgLy8gIyBUaGVyZSdzIG5vIHdheSB0byB3cml0ZSBhIGdlbmVyYWwgdWludDUxMiB0d28ncyBjb21wbGVtZW50IGJlY2F1c2UgdGhlcmUncyBubyB3YXkgdG8gZ2V0IGEgbGFyZ2VyIG51bWJlciB0aGFuCiAgICAvLyAjICBhbiB1aW50NTEyIGxpa2Ugd2UgY2FuIGRvIGZvciB1aW50NjQgd2l0aCB3aWRlIG1hdGguCiAgICAvLyAjIEZvcnR1bmF0ZWx5LCB3ZSBkb24ndCB1c2UgdWludDUxMi4gVGhpcyBjb2RlIHdvcmtzIGFzc3VtaW5nIHRoYXQgInZhbHVlOiBCaWdVSW50IiBpcyBhbiB1aW50MjU2LgogICAgLy8gIyBUaGlzIGNvZGUgd2lsbCBwcmV2ZW50IGEgbmF0aXZlIG92ZXJmbG93IGFuZCByZXR1cm4gYSBjb3JyZWN0bHkgbWFza2VkIHVpbnQyNTYuCiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9fcGNnMTI4X3R3b3ModmFsdWU6IEJpZ1VJbnQpIC0+IEJpZ1VJbnQ6CiAgICBwcm90byAxIDEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo3NS04MQogICAgLy8gdmFsdWUKICAgIC8vIF4gQmlnVUludC5mcm9tX2J5dGVzKAogICAgLy8gICAgIGIiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiCiAgICAvLyAgICAgKyBiIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIgogICAgLy8gICAgICsgYiJceEZGXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRiIKICAgIC8vICAgICArIGIiXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkYiCiAgICAvLyApCiAgICBmcmFtZV9kaWcgLTEKICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo3Ny04MAogICAgLy8gYiJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIKICAgIC8vICsgYiJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIKICAgIC8vICsgYiJceEZGXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRiIKICAgIC8vICsgYiJceEZGXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRiIKICAgIGJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6NzUtODEKICAgIC8vIHZhbHVlCiAgICAvLyBeIEJpZ1VJbnQuZnJvbV9ieXRlcygKICAgIC8vICAgICBiIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIgogICAgLy8gICAgICsgYiJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIKICAgIC8vICAgICArIGIiXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkYiCiAgICAvLyAgICAgKyBiIlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGIgogICAgLy8gKQogICAgYl4KICAgIC8vIC52ZW52L0xpYi9zaXRlLXBhY2thZ2VzL2xpYl9wY2cveHNoX3JyX3F1YWRydXBsZV82NF8zMi5weTo4MgogICAgLy8gKSArIEJpZ1VJbnQoMSkKICAgIGJ5dGUgMHgwMQogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5Ojc0LTgyCiAgICAvLyB3aWRlX3ZhbHVlX2NvbXBsID0gKAogICAgLy8gICAgIHZhbHVlCiAgICAvLyAgICAgXiBCaWdVSW50LmZyb21fYnl0ZXMoCiAgICAvLyAgICAgICAgIGIiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiCiAgICAvLyAgICAgICAgICsgYiJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIKICAgIC8vICAgICAgICAgKyBiIlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGIgogICAgLy8gICAgICAgICArIGIiXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkYiCiAgICAvLyAgICAgKQogICAgLy8gKSArIEJpZ1VJbnQoMSkKICAgIGIrCiAgICAvLyAudmVudi9MaWIvc2l0ZS1wYWNrYWdlcy9saWJfcGNnL3hzaF9ycl9xdWFkcnVwbGVfNjRfMzIucHk6ODUtODgKICAgIC8vIGIiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiCiAgICAvLyArIGIiXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDAiCiAgICAvLyArIGIiXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkYiCiAgICAvLyArIGIiXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkYiCiAgICBieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZgogICAgLy8gLnZlbnYvTGliL3NpdGUtcGFja2FnZXMvbGliX3BjZy94c2hfcnJfcXVhZHJ1cGxlXzY0XzMyLnB5Ojg0LTg5CiAgICAvLyByZXR1cm4gd2lkZV92YWx1ZV9jb21wbCAmIEJpZ1VJbnQuZnJvbV9ieXRlcygKICAgIC8vICAgICBiIlx4MDBceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwIgogICAgLy8gICAgICsgYiJceDAwXHgwMFx4MDBceDAwXHgwMFx4MDBceDAwXHgwMCIKICAgIC8vICAgICArIGIiXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkYiCiAgICAvLyAgICAgKyBiIlx4RkZceEZGXHhGRlx4RkZceEZGXHhGRlx4RkZceEZGIgogICAgLy8gKQogICAgYiYKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZXJpZmlhYmxlX2dpdmVhd2F5LmNvbnRyYWN0LlZlcmlmaWFibGVHaXZlYXdheS51cGRhdGUoKSAtPiB2b2lkOgp1cGRhdGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo0OS01MAogICAgLy8gQGFyYzQuYmFyZW1ldGhvZChhbGxvd19hY3Rpb25zPVtPbkNvbXBsZXRlQWN0aW9uLlVwZGF0ZUFwcGxpY2F0aW9uXSkKICAgIC8vIGRlZiB1cGRhdGUoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3ZlcmlmaWFibGVfZ2l2ZWF3YXkvY29udHJhY3QucHk6NTEKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlcmlmaWFibGVfZ2l2ZWF3YXkuY29udHJhY3QuVmVyaWZpYWJsZUdpdmVhd2F5LmRlbGV0ZSgpIC0+IHZvaWQ6CmRlbGV0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjUzLTU0CiAgICAvLyBAYXJjNC5iYXJlbWV0aG9kKGFsbG93X2FjdGlvbnM9W09uQ29tcGxldGVBY3Rpb24uRGVsZXRlQXBwbGljYXRpb25dKQogICAgLy8gZGVmIGRlbGV0ZShzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvdmVyaWZpYWJsZV9naXZlYXdheS9jb250cmFjdC5weTo1NQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIK",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy92ZXJpZmlhYmxlX2dpdmVhd2F5L2NvbnRyYWN0LnB5OjQ1CiAgICAvLyBjbGFzcyBWZXJpZmlhYmxlR2l2ZWF3YXkoQVJDNENvbnRyYWN0KToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {
                "active_commitment": {
                    "type": "bytes",
                    "key": "active_commitment"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "VerifiableGiveaway",
        "methods": [
            {
                "name": "commit",
                "args": [
                    {
                        "type": "uint8",
                        "name": "delay"
                    },
                    {
                        "type": "uint8",
                        "name": "participants"
                    },
                    {
                        "type": "uint8",
                        "name": "winners"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reveal",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(byte[],uint8[])"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
}