{
    "hints": {
        "get_templated_randomness_beacon_id()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_templated_safety_round_gap()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "commit(uint8,uint32,uint8)void": {
            "call_config": {
                "no_op": "CALL",
                "opt_in": "CALL"
            }
        },
        "reveal()(byte[32],uint32[])": {
            "call_config": {
                "no_op": "CALL",
                "close_out": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Reveal",
                    "elements": [
                        [
                            "commitment_tx_id",
                            "byte[32]"
                        ],
                        [
                            "winners",
                            "uint32[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuYXBwcm92YWxfcHJvZ3JhbToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A4CiAgICBtZXRob2QgImdldF90ZW1wbGF0ZWRfcmFuZG9tbmVzc19iZWFjb25faWQoKXVpbnQ2NCIKICAgIG1ldGhvZCAiZ2V0X3RlbXBsYXRlZF9zYWZldHlfcm91bmRfZ2FwKCl1aW50NjQiCiAgICBtZXRob2QgImNvbW1pdCh1aW50OCx1aW50MzIsdWludDgpdm9pZCIKICAgIG1ldGhvZCAicmV2ZWFsKCkoYnl0ZVszMl0sdWludDMyW10pIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9nZXRfdGVtcGxhdGVkX3JhbmRvbW5lc3NfYmVhY29uX2lkX3JvdXRlQDIgbWFpbl9nZXRfdGVtcGxhdGVkX3NhZmV0eV9yb3VuZF9nYXBfcm91dGVAMyBtYWluX2NvbW1pdF9yb3V0ZUA0IG1haW5fcmV2ZWFsX3JvdXRlQDUKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fZ2V0X3RlbXBsYXRlZF9yYW5kb21uZXNzX2JlYWNvbl9pZF9yb3V0ZUAyOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfdGVtcGxhdGVkX3JhbmRvbW5lc3NfYmVhY29uX2lkCiAgICBpdG9iCiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2dldF90ZW1wbGF0ZWRfc2FmZXR5X3JvdW5kX2dhcF9yb3V0ZUAzOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRfdGVtcGxhdGVkX3NhZmV0eV9yb3VuZF9nYXAKICAgIGl0b2IKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fY29tbWl0X3JvdXRlQDQ6CiAgICBpbnQgMQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc2hsCiAgICBpbnQgMwogICAgJgogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBvbmUgb2YgTm9PcCwgT3B0SW4KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBjYWxsc3ViIGNvbW1pdAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9yZXZlYWxfcm91dGVANToKICAgIGludCAxCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBzaGwKICAgIGludCA1CiAgICAmCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG9uZSBvZiBOb09wLCBDbG9zZU91dAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmV2ZWFsCiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A4OgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgc3dpdGNoIG1haW5fY3JlYXRlQDkgbWFpbl9yZWplY3RfYmFyZV9vbl9jb21wbGV0aW9uQDEyIG1haW5fcmVqZWN0X2JhcmVfb25fY29tcGxldGlvbkAxMiBtYWluX3JlamVjdF9iYXJlX29uX2NvbXBsZXRpb25AMTIgbWFpbl91cGRhdGVAMTAgbWFpbl9kZWxldGVAMTEKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCm1haW5fY3JlYXRlQDk6CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGlzIGNyZWF0aW5nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3VwZGF0ZUAxMDoKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHVwZGF0ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9kZWxldGVAMTE6CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBkZWxldGUKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcmVqZWN0X2JhcmVfb25fY29tcGxldGlvbkAxMjoKICAgIGVyciAvLyByZWplY3QgdHJhbnNhY3Rpb24KCgovLyBzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuZ2V0X3RlbXBsYXRlZF9yYW5kb21uZXNzX2JlYWNvbl9pZCgpIC0+IHVpbnQ2NDoKZ2V0X3RlbXBsYXRlZF9yYW5kb21uZXNzX2JlYWNvbl9pZDoKICAgIHByb3RvIDAgMQogICAgaW50IFRNUExfUkFORE9NTkVTU19CRUFDT05fSUQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZXJpZmlhYmxlX2dpdmVhd2F5LmNvbnRyYWN0LlZlcmlmaWFibGVHaXZlYXdheS5nZXRfdGVtcGxhdGVkX3NhZmV0eV9yb3VuZF9nYXAoKSAtPiB1aW50NjQ6CmdldF90ZW1wbGF0ZWRfc2FmZXR5X3JvdW5kX2dhcDoKICAgIHByb3RvIDAgMQogICAgaW50IFRNUExfU0FGRVRZX1JPVU5EX0dBUAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlcmlmaWFibGVfZ2l2ZWF3YXkuY29udHJhY3QuVmVyaWZpYWJsZUdpdmVhd2F5LmNvbW1pdChkZWxheTogYnl0ZXMsIHBhcnRpY2lwYW50czogYnl0ZXMsIHdpbm5lcnM6IGJ5dGVzKSAtPiB2b2lkOgpjb21taXQ6CiAgICBwcm90byAzIDAKICAgIGZyYW1lX2RpZyAtMwogICAgYnRvaQogICAgZHVwCiAgICBpbnQgVE1QTF9TQUZFVFlfUk9VTkRfR0FQCiAgICA+PQogICAgYXNzZXJ0CiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIGR1cAogICAgaW50IDEKICAgID49CiAgICBhc3NlcnQKICAgIGZyYW1lX2RpZyAtMgogICAgYnRvaQogICAgZHVwCiAgICBpbnQgMgogICAgPj0KICAgIGFzc2VydAogICAgZHVwMgogICAgPD0KICAgIGFzc2VydAogICAgaW50IDcwMAogICAgaW50IFRNUExfT1BVUF9DQUxMU19TQUZFVFlfQ0hFQ0sKICAgICoKICAgIGludCAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIGludCAwCiAgICBjb3ZlciAyCiAgICBkdXAKICAgIGludCAxCiAgICArCiAgICBjb3ZlciAyCiAgICBzd2FwCiAgICAtCiAgICBpbnQgMQogICAgKwoKY29tbWl0X2Zvcl9oZWFkZXJAMToKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgMgogICAgPAogICAgYnogY29tbWl0X2FmdGVyX2ZvckA0CiAgICBmcmFtZV9kaWcgMwogICAgZHVwCiAgICBjYWxsc3ViIGJpbmFyeV9sb2dhcml0aG0KICAgIGludCAxCiAgICB8CiAgICBmcmFtZV9kaWcgMQogICAgKwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIGludCAxMjgKICAgIGludCBUTVBMX0xPR0FSSVRITV9GUkFDVElPTkFMX1BSRUNJU0lPTgogICAgc2hsCiAgICA8PQogICAgYXNzZXJ0CiAgICBpbnQgMQogICAgKwogICAgZnJhbWVfYnVyeSAzCiAgICBiIGNvbW1pdF9mb3JfaGVhZGVyQDEKCmNvbW1pdF9hZnRlcl9mb3JANDoKICAgIHR4biBUeElECiAgICBnbG9iYWwgUm91bmQKICAgIGZyYW1lX2RpZyAwCiAgICArCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgdHhuIFNlbmRlcgogICAgYnl0ZSAiY29tbWl0bWVudCIKICAgIHVuY292ZXIgMgogICAgYXBwX2xvY2FsX3B1dAogICAgcmV0c3ViCgoKLy8gYWxnb3B5LmVuc3VyZV9idWRnZXQocmVxdWlyZWRfYnVkZ2V0OiB1aW50NjQsIGZlZV9zb3VyY2U6IHVpbnQ2NCkgLT4gdm9pZDoKZW5zdXJlX2J1ZGdldDoKICAgIHByb3RvIDIgMAogICAgZnJhbWVfZGlnIC0yCiAgICBpbnQgMTAKICAgICsKCmVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDE6CiAgICBmcmFtZV9kaWcgMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3CiAgICBpdHhuX2JlZ2luCiAgICBpbnQgYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgYnl0ZSAweDA2ODEwMQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KICAgIGJ5dGUgMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KICAgIGZyYW1lX2RpZyAtMQogICAgc3dpdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMzoKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANgoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV8xQDQ6CiAgICBnbG9iYWwgTWluVHhuRmVlCiAgICBpdHhuX2ZpZWxkIEZlZQoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDY6CiAgICBpdHhuX3N1Ym1pdAogICAgYiBlbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxCgplbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDc6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5iaW5hcnlfbG9nYXJpdGhtKG46IHVpbnQ2NCkgLT4gdWludDY0OgpiaW5hcnlfbG9nYXJpdGhtOgogICAgcHJvdG8gMSAxCiAgICBieXRlICIiCiAgICBkdXAKICAgIGZyYW1lX2RpZyAtMQogICAgYml0bGVuCiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBpbnQgMAogICAgc3dhcAogICAgaW50IDEKICAgIHN3YXAKICAgIHNobAogICAgZHVwCiAgICBmcmFtZV9kaWcgLTEKICAgID09CiAgICBieiBiaW5hcnlfbG9nYXJpdGhtX2FmdGVyX2lmX2Vsc2VAMgogICAgaW50IDAKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpiaW5hcnlfbG9nYXJpdGhtX2FmdGVyX2lmX2Vsc2VAMjoKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDAKCmJpbmFyeV9sb2dhcml0aG1fZm9yX2hlYWRlckAzOgogICAgZnJhbWVfZGlnIDAKICAgIGludCBUTVBMX0xPR0FSSVRITV9GUkFDVElPTkFMX1BSRUNJU0lPTgogICAgPAogICAgYnogYmluYXJ5X2xvZ2FyaXRobV9hZnRlcl9mb3JAOQogICAgZnJhbWVfZGlnIC0xCiAgICBkdXAKICAgIGFkZHcKICAgIGZyYW1lX2RpZyA0CiAgICBkaXZ3CiAgICBmcmFtZV9idXJ5IC0xCiAgICBpbnQgMgogICAgZnJhbWVfZGlnIDIKICAgIHNobAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIGZyYW1lX2RpZyAtMQogICAgPD0KICAgIGJ6IGJpbmFyeV9sb2dhcml0aG1fZWxzZV9ib2R5QDYKICAgIGZyYW1lX2RpZyAzCiAgICBpbnQgMQogICAgc2hsCiAgICBpbnQgMQogICAgfAogICAgZnJhbWVfYnVyeSAzCiAgICBmcmFtZV9kaWcgLTEKICAgIGZyYW1lX2RpZyA0CiAgICBtdWx3CiAgICBmcmFtZV9kaWcgMQogICAgZGl2dwogICAgZnJhbWVfYnVyeSAtMQogICAgYiBiaW5hcnlfbG9nYXJpdGhtX2FmdGVyX2lmX2Vsc2VANwoKYmluYXJ5X2xvZ2FyaXRobV9lbHNlX2JvZHlANjoKICAgIGZyYW1lX2RpZyAzCiAgICBpbnQgMQogICAgc2hsCiAgICBmcmFtZV9idXJ5IDMKCmJpbmFyeV9sb2dhcml0aG1fYWZ0ZXJfaWZfZWxzZUA3OgogICAgZnJhbWVfZGlnIDAKICAgIGludCAxCiAgICArCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgYmluYXJ5X2xvZ2FyaXRobV9mb3JfaGVhZGVyQDMKCmJpbmFyeV9sb2dhcml0aG1fYWZ0ZXJfZm9yQDk6CiAgICBmcmFtZV9kaWcgMgogICAgaW50IFRNUExfTE9HQVJJVEhNX0ZSQUNUSU9OQUxfUFJFQ0lTSU9OCiAgICBzaGwKICAgIGZyYW1lX2RpZyAzCiAgICB8CiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZXJpZmlhYmxlX2dpdmVhd2F5LmNvbnRyYWN0LlZlcmlmaWFibGVHaXZlYXdheS5yZXZlYWwoKSAtPiBieXRlczoKcmV2ZWFsOgogICAgcHJvdG8gMCAxCiAgICBpbnQgMAogICAgZHVwbiAzCiAgICBieXRlICIiCiAgICBkdXBuIDgKICAgIHR4biBTZW5kZXIKICAgIGludCAwCiAgICBieXRlICJjb21taXRtZW50IgogICAgYXBwX2xvY2FsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY29tbWl0bWVudCBleGlzdHMgZm9yIGFjY291bnQKICAgIHR4biBTZW5kZXIKICAgIGJ5dGUgImNvbW1pdG1lbnQiCiAgICBhcHBfbG9jYWxfZGVsCiAgICBkdXAKICAgIGV4dHJhY3QgNDAgNCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIHN3YXAKICAgIGR1cAogICAgZXh0cmFjdCA0NCAxIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgc3dhcAogICAgZ2xvYmFsIFJvdW5kCiAgICBkaWcgMQogICAgZXh0cmFjdCAzMiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBidG9pCiAgICB1bmNvdmVyIDIKICAgIDw9CiAgICBhc3NlcnQKICAgIGl0eG5fYmVnaW4KICAgIHN3YXAKICAgIGV4dHJhY3QgMCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgY292ZXIgMgogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGludCBUTVBMX1JBTkRPTU5FU1NfQkVBQ09OX0lECiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIG1ldGhvZCAibXVzdF9nZXQodWludDY0LGJ5dGVbXSlieXRlW10iCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpbnQgYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBpdHhuX3N1Ym1pdAogICAgaXR4biBMYXN0TG9nCiAgICBkdXAKICAgIGV4dHJhY3QgNCAwCiAgICBzd2FwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZSAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEFSQzQgcHJlZml4IGlzIHZhbGlkCiAgICBleHRyYWN0IDIgMAogICAgY2FsbHN1YiBwY2cxMjhfaW5pdAogICAgY292ZXIgMwogICAgY292ZXIgMgogICAgc3dhcAogICAgaW50IDcwMAogICAgaW50IFRNUExfT1BVUF9DQUxMU19ESUNUX0lOSVQKICAgICoKICAgIGludCAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIGludCAwCgpyZXZlYWxfZm9yX2hlYWRlckAyOgogICAgZnJhbWVfZGlnIDIwCiAgICBpbnQgMjAwCiAgICA8CiAgICBieiByZXZlYWxfYWZ0ZXJfZm9yQDUKICAgIGZyYW1lX2RpZyAyMAogICAgZHVwCiAgICBieXRlIDB4CiAgICBzdG9yZXMKICAgIGludCAxCiAgICArCiAgICBmcmFtZV9idXJ5IDIwCiAgICBiIHJldmVhbF9mb3JfaGVhZGVyQDIKCnJldmVhbF9hZnRlcl9mb3JANToKICAgIGZyYW1lX2RpZyAxNAogICAgZnJhbWVfZGlnIDEzCiAgICA8CiAgICBieiByZXZlYWxfdGVybmFyeV9mYWxzZUA3CiAgICBmcmFtZV9kaWcgMTQKICAgIGZyYW1lX2J1cnkgMTAKICAgIGIgcmV2ZWFsX3Rlcm5hcnlfbWVyZ2VAOAoKcmV2ZWFsX3Rlcm5hcnlfZmFsc2VANzoKICAgIGZyYW1lX2RpZyAxNAogICAgaW50IDEKICAgIC0KICAgIGZyYW1lX2J1cnkgMTAKCnJldmVhbF90ZXJuYXJ5X21lcmdlQDg6CiAgICBpbnQgNzAwCiAgICBpbnQgVE1QTF9PUFVQX0NBTExTX0tOVVRIX1NIVUZGTEUKICAgICoKICAgIGludCAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIGZyYW1lX2RpZyAxNAogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIGZyYW1lX2J1cnkgMgogICAgaW50IDAKICAgIGZyYW1lX2J1cnkgMjAKCnJldmVhbF9mb3JfaGVhZGVyQDk6CiAgICBmcmFtZV9kaWcgMjAKICAgIGZyYW1lX2RpZyAxMAogICAgPAogICAgYnogcmV2ZWFsX2FmdGVyX2ZvckAyNAogICAgZnJhbWVfZGlnIDIwCiAgICBkdXAKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAxMwogICAgaXRvYgogICAgZnJhbWVfZGlnIDE5CiAgICBmcmFtZV9kaWcgMTgKICAgIGZyYW1lX2RpZyAxNwogICAgZnJhbWVfZGlnIDE2CiAgICB1bmNvdmVyIDUKICAgIHVuY292ZXIgNQogICAgaW50IDEKICAgIGNhbGxzdWIgcGNnMTI4X3JhbmRvbQogICAgY292ZXIgNAogICAgZnJhbWVfYnVyeSAxNgogICAgZnJhbWVfYnVyeSAxNwogICAgZnJhbWVfYnVyeSAxOAogICAgZnJhbWVfYnVyeSAxOQogICAgZXh0cmFjdCAyIDAKICAgIGV4dHJhY3QgMCAxNiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGludCAxMgogICAgZXh0cmFjdF91aW50MzIKICAgIGR1cAogICAgZnJhbWVfYnVyeSA2CiAgICBkaWcgMQogICAgaW50IDIwMAogICAgJQogICAgbG9hZHMKICAgIHVuY292ZXIgMgogICAgY2FsbHN1YiBsaW5lYXJfc2VhcmNoCiAgICBmcmFtZV9idXJ5IDUKICAgIHBvcAogICAgZnJhbWVfYnVyeSA0CiAgICBkdXAKICAgIGludCAyMDAKICAgICUKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxMQogICAgbG9hZHMKICAgIGR1cAogICAgZnJhbWVfYnVyeSAwCiAgICBzd2FwCiAgICBjYWxsc3ViIGxpbmVhcl9zZWFyY2gKICAgIGZyYW1lX2J1cnkgOQogICAgZnJhbWVfYnVyeSA4CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNwogICAgYnogcmV2ZWFsX3Rlcm5hcnlfZmFsc2VAMTIKICAgIGZyYW1lX2RpZyA5CiAgICBiIHJldmVhbF90ZXJuYXJ5X21lcmdlQDEzCgpyZXZlYWxfdGVybmFyeV9mYWxzZUAxMjoKICAgIGZyYW1lX2RpZyA2CiAgICBpbnQgMQogICAgKwoKcmV2ZWFsX3Rlcm5hcnlfbWVyZ2VAMTM6CiAgICBpdG9iCiAgICBleHRyYWN0IDQgNAogICAgZnJhbWVfZGlnIDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAyCiAgICBmcmFtZV9kaWcgNwogICAgYnogcmV2ZWFsX2Vsc2VfYm9keUAxOAogICAgZnJhbWVfZGlnIDgKICAgIGludCA0CiAgICArCiAgICBmcmFtZV9idXJ5IDEyCiAgICBmcmFtZV9kaWcgNAogICAgYnogcmV2ZWFsX3Rlcm5hcnlfZmFsc2VAMTYKICAgIGZyYW1lX2RpZyA1CiAgICBiIHJldmVhbF90ZXJuYXJ5X21lcmdlQDE3CgpyZXZlYWxfdGVybmFyeV9mYWxzZUAxNjoKICAgIGZyYW1lX2RpZyAyMAogICAgaW50IDEKICAgICsKCnJldmVhbF90ZXJuYXJ5X21lcmdlQDE3OgogICAgaXRvYgogICAgZXh0cmFjdCA0IDQKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgMTIKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTMKICAgIGZyYW1lX2J1cnkgMAogICAgYiByZXZlYWxfYWZ0ZXJfaWZfZWxzZUAyMgoKcmV2ZWFsX2Vsc2VfYm9keUAxODoKICAgIGZyYW1lX2RpZyA2CiAgICBpdG9iCiAgICBleHRyYWN0IDQgNAogICAgZnJhbWVfYnVyeSAxCiAgICBmcmFtZV9kaWcgNAogICAgYnogcmV2ZWFsX3Rlcm5hcnlfZmFsc2VAMjAKICAgIGZyYW1lX2RpZyA1CiAgICBiIHJldmVhbF90ZXJuYXJ5X21lcmdlQDIxCgpyZXZlYWxfdGVybmFyeV9mYWxzZUAyMDoKICAgIGZyYW1lX2RpZyAyMAogICAgaW50IDEKICAgICsKCnJldmVhbF90ZXJuYXJ5X21lcmdlQDIxOgogICAgaXRvYgogICAgZXh0cmFjdCA0IDQKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAwCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMAoKcmV2ZWFsX2FmdGVyX2lmX2Vsc2VAMjI6CiAgICBmcmFtZV9kaWcgMTEKICAgIGZyYW1lX2RpZyAwCiAgICBzdG9yZXMKICAgIGZyYW1lX2RpZyAyMAogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMjAKICAgIGIgcmV2ZWFsX2Zvcl9oZWFkZXJAOQoKcmV2ZWFsX2FmdGVyX2ZvckAyNDoKICAgIGZyYW1lX2RpZyAxMwogICAgZnJhbWVfZGlnIDE0CiAgICA9PQogICAgZnJhbWVfZGlnIDIKICAgIGZyYW1lX2J1cnkgMwogICAgYnogcmV2ZWFsX2FmdGVyX2lmX2Vsc2VAMjYKICAgIGZyYW1lX2RpZyAxNAogICAgZHVwCiAgICBpbnQgMQogICAgLQogICAgZHVwCiAgICBpbnQgMjAwCiAgICAlCiAgICBsb2FkcwogICAgc3dhcAogICAgY2FsbHN1YiBsaW5lYXJfc2VhcmNoCiAgICBjb3ZlciAyCiAgICBwb3AKICAgIHNlbGVjdAogICAgaXRvYgogICAgZXh0cmFjdCA0IDQKICAgIGZyYW1lX2RpZyAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMwoKcmV2ZWFsX2FmdGVyX2lmX2Vsc2VAMjY6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDE1CiAgICBieXRlIDB4MDAyMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy5wY2cxMjgucGNnMTI4X2luaXQoc2VlZDogYnl0ZXMpIC0+IHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIHVpbnQ2NDoKcGNnMTI4X2luaXQ6CiAgICBwcm90byAxIDQKICAgIGZyYW1lX2RpZyAtMQogICAgbGVuCiAgICBpbnQgMzIKICAgID09CiAgICBhc3NlcnQKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgY2FsbHN1YiBfX3BjZzMyX2luaXQKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDgKICAgIGV4dHJhY3RfdWludDY0CiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwOQogICAgY2FsbHN1YiBfX3BjZzMyX2luaXQKICAgIGZyYW1lX2RpZyAtMQogICAgaW50IDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MTEKICAgIGNhbGxzdWIgX19wY2czMl9pbml0CiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAyNAogICAgZXh0cmFjdF91aW50NjQKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDEzCiAgICBjYWxsc3ViIF9fcGNnMzJfaW5pdAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy5wY2czMi5fX3BjZzMyX2luaXQoaW5pdGlhbF9zdGF0ZTogdWludDY0LCBpbmNyOiB1aW50NjQpIC0+IHVpbnQ2NDoKX19wY2czMl9pbml0OgogICAgcHJvdG8gMiAxCiAgICBpbnQgMAogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgZnJhbWVfZGlnIC0yCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfX3BjZzMyX3N0ZXAKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cucGNnMzIuX19wY2czMl9zdGVwKHN0YXRlOiB1aW50NjQsIGluY3I6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyX3N0ZXA6CiAgICBwcm90byAyIDEKICAgIGZyYW1lX2RpZyAtMgogICAgaW50IDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIG11bHcKICAgIGJ1cnkgMQogICAgZnJhbWVfZGlnIC0xCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cucGNnMTI4LnBjZzEyOF9yYW5kb20oc3RhdGUuMDogdWludDY0LCBzdGF0ZS4xOiB1aW50NjQsIHN0YXRlLjI6IHVpbnQ2NCwgc3RhdGUuMzogdWludDY0LCBsb3dlcl9ib3VuZDogYnl0ZXMsIHVwcGVyX2JvdW5kOiBieXRlcywgbGVuZ3RoOiB1aW50NjQpIC0+IHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIHVpbnQ2NCwgYnl0ZXM6CnBjZzEyOF9yYW5kb206CiAgICBwcm90byA3IDUKICAgIGludCAwCiAgICBkdXBuIDIKICAgIGJ5dGUgIiIKICAgIGJ5dGUgMHgwMDAwCiAgICBmcmFtZV9kaWcgLTMKICAgIGJ5dGUgMHgKICAgIGI9PQogICAgYnogcGNnMTI4X3JhbmRvbV9lbHNlX2JvZHlANwogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4CiAgICBiPT0KICAgIGJ6IHBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDcKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDMKCnBjZzEyOF9yYW5kb21fZm9yX2hlYWRlckAzOgogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyAtMQogICAgPAogICAgYnogcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDIwCiAgICBmcmFtZV9kaWcgLTcKICAgIGZyYW1lX2RpZyAtNgogICAgZnJhbWVfZGlnIC01CiAgICBmcmFtZV9kaWcgLTQKICAgIGNhbGxzdWIgX19wY2cxMjhfdW5ib3VuZGVkX3JhbmRvbQogICAgY292ZXIgNAogICAgZnJhbWVfYnVyeSAtNAogICAgZnJhbWVfYnVyeSAtNQogICAgZnJhbWVfYnVyeSAtNgogICAgZnJhbWVfYnVyeSAtNwogICAgZnJhbWVfZGlnIDQKICAgIGV4dHJhY3QgMiAwCiAgICBzd2FwCiAgICBkdXAKICAgIGxlbgogICAgaW50IDE2CiAgICA8PQogICAgYXNzZXJ0IC8vIG92ZXJmbG93CiAgICBpbnQgMTYKICAgIGJ6ZXJvCiAgICBifAogICAgY29uY2F0CiAgICBkdXAKICAgIGxlbgogICAgaW50IDE2CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDQKICAgIGZyYW1lX2RpZyAzCiAgICBpbnQgMQogICAgKwogICAgZnJhbWVfYnVyeSAzCiAgICBiIHBjZzEyOF9yYW5kb21fZm9yX2hlYWRlckAzCgpwY2cxMjhfcmFuZG9tX2Vsc2VfYm9keUA3OgogICAgZnJhbWVfZGlnIC0yCiAgICBieXRlIDB4CiAgICBiIT0KICAgIGJ6IHBjZzEyOF9yYW5kb21fZWxzZV9ib2R5QDkKICAgIGZyYW1lX2RpZyAtMgogICAgYnl0ZSAweDAxCiAgICBiPgogICAgYXNzZXJ0CiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGUgMHgwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBiPAogICAgYXNzZXJ0CiAgICBmcmFtZV9kaWcgLTIKICAgIGJ5dGUgMHgwMQogICAgYi0KICAgIGZyYW1lX2RpZyAtMwogICAgYj4KICAgIGFzc2VydAogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgLTMKICAgIGItCiAgICBmcmFtZV9idXJ5IDAKICAgIGIgcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDEwCgpwY2cxMjhfcmFuZG9tX2Vsc2VfYm9keUA5OgogICAgZnJhbWVfZGlnIC0zCiAgICBieXRlIDB4ODAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIGI8CiAgICBhc3NlcnQKICAgIGJ5dGUgMHgwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICBmcmFtZV9kaWcgLTMKICAgIGItCiAgICBmcmFtZV9idXJ5IDAKCnBjZzEyOF9yYW5kb21fYWZ0ZXJfaWZfZWxzZUAxMDoKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGNhbGxzdWIgX191aW50MTI4X3R3b3MKICAgIHN3YXAKICAgIGIlCiAgICBmcmFtZV9idXJ5IDIKICAgIGludCAwCiAgICBmcmFtZV9idXJ5IDMKCnBjZzEyOF9yYW5kb21fZm9yX2hlYWRlckAxMToKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgLTEKICAgIDwKICAgIGJ6IHBjZzEyOF9yYW5kb21fYWZ0ZXJfZm9yQDE5CgpwY2cxMjhfcmFuZG9tX3doaWxlX3RvcEAxMzoKICAgIGZyYW1lX2RpZyAtNwogICAgZnJhbWVfZGlnIC02CiAgICBmcmFtZV9kaWcgLTUKICAgIGZyYW1lX2RpZyAtNAogICAgY2FsbHN1YiBfX3BjZzEyOF91bmJvdW5kZWRfcmFuZG9tCiAgICBkdXAKICAgIGNvdmVyIDUKICAgIGZyYW1lX2J1cnkgMQogICAgZnJhbWVfYnVyeSAtNAogICAgZnJhbWVfYnVyeSAtNQogICAgZnJhbWVfYnVyeSAtNgogICAgZnJhbWVfYnVyeSAtNwogICAgZnJhbWVfZGlnIDIKICAgIGI+PQogICAgYnogcGNnMTI4X3JhbmRvbV93aGlsZV90b3BAMTMKICAgIGZyYW1lX2RpZyA0CiAgICBleHRyYWN0IDIgMAogICAgZnJhbWVfZGlnIDEKICAgIGZyYW1lX2RpZyAwCiAgICBiJQogICAgZnJhbWVfZGlnIC0zCiAgICBiKwogICAgZHVwCiAgICBsZW4KICAgIGludCAxNgogICAgPD0KICAgIGFzc2VydCAvLyBvdmVyZmxvdwogICAgaW50IDE2CiAgICBiemVybwogICAgYnwKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIGludCAxNgogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSA0CiAgICBmcmFtZV9kaWcgMwogICAgaW50IDEKICAgICsKICAgIGZyYW1lX2J1cnkgMwogICAgYiBwY2cxMjhfcmFuZG9tX2Zvcl9oZWFkZXJAMTEKCnBjZzEyOF9yYW5kb21fYWZ0ZXJfZm9yQDE5OgoKcGNnMTI4X3JhbmRvbV9hZnRlcl9pZl9lbHNlQDIwOgogICAgZnJhbWVfZGlnIC03CiAgICBmcmFtZV9kaWcgLTYKICAgIGZyYW1lX2RpZyAtNQogICAgZnJhbWVfZGlnIC00CiAgICBmcmFtZV9kaWcgNAogICAgdW5jb3ZlciA5CiAgICB1bmNvdmVyIDkKICAgIHVuY292ZXIgOQogICAgdW5jb3ZlciA5CiAgICB1bmNvdmVyIDkKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cucGNnMTI4Ll9fcGNnMTI4X3VuYm91bmRlZF9yYW5kb20oc3RhdGUuMDogdWludDY0LCBzdGF0ZS4xOiB1aW50NjQsIHN0YXRlLjI6IHVpbnQ2NCwgc3RhdGUuMzogdWludDY0KSAtPiB1aW50NjQsIHVpbnQ2NCwgdWludDY0LCB1aW50NjQsIGJ5dGVzOgpfX3BjZzEyOF91bmJvdW5kZWRfcmFuZG9tOgogICAgcHJvdG8gNCA1CiAgICBmcmFtZV9kaWcgLTQKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDA3CiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgZHVwCiAgICAhCiAgICBpbnQgMTQ0MjY5NTA0MDg4ODk2MzQwOQogICAgc3dhcAogICAgc2hsCiAgICBmcmFtZV9kaWcgLTMKICAgIHN3YXAKICAgIGNhbGxzdWIgX19wY2czMl9zdGVwCiAgICBkdXAKICAgICEKICAgIGludCAxNDQyNjk1MDQwODg4OTYzNDExCiAgICBzd2FwCiAgICBzaGwKICAgIGZyYW1lX2RpZyAtMgogICAgc3dhcAogICAgY2FsbHN1YiBfX3BjZzMyX3N0ZXAKICAgIGR1cAogICAgIQogICAgaW50IDE0NDI2OTUwNDA4ODg5NjM0MTMKICAgIHN3YXAKICAgIHNobAogICAgZnJhbWVfZGlnIC0xCiAgICBzd2FwCiAgICBjYWxsc3ViIF9fcGNnMzJfc3RlcAogICAgZnJhbWVfZGlnIC00CiAgICBjYWxsc3ViIF9fcGNnMzJfb3V0cHV0CiAgICBpbnQgMzIKICAgIHNobAogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9fcGNnMzJfb3V0cHV0CiAgICB8CiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgX19wY2czMl9vdXRwdXQKICAgIGludCAzMgogICAgc2hsCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX19wY2czMl9vdXRwdXQKICAgIHwKICAgIGl0b2IKICAgIGNvbmNhdAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy5wY2czMi5fX3BjZzMyX291dHB1dChzdGF0ZTogdWludDY0KSAtPiB1aW50NjQ6Cl9fcGNnMzJfb3V0cHV0OgogICAgcHJvdG8gMSAxCiAgICBmcmFtZV9kaWcgLTEKICAgIGludCAxOAogICAgc2hyCiAgICBmcmFtZV9kaWcgLTEKICAgIF4KICAgIGludCAyNwogICAgc2hyCiAgICBpbnQgNDI5NDk2NzI5NQogICAgJgogICAgZnJhbWVfZGlnIC0xCiAgICBpbnQgNTkKICAgIHNocgogICAgZHVwCiAgICB+CiAgICBpbnQgMQogICAgYWRkdwogICAgYnVyeSAxCiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzaHIKICAgIGNvdmVyIDIKICAgIGludCAzMQogICAgJgogICAgc2hsCiAgICBpbnQgNDI5NDk2NzI5NQogICAgJgogICAgfAogICAgcmV0c3ViCgoKLy8gbGliX3BjZy5wY2cxMjguX191aW50MTI4X3R3b3ModmFsdWU6IGJ5dGVzKSAtPiBieXRlczoKX191aW50MTI4X3R3b3M6CiAgICBwcm90byAxIDEKICAgIGZyYW1lX2RpZyAtMQogICAgYn4KICAgIGJ5dGUgMHgwMQogICAgYisKICAgIGJ5dGUgMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZgogICAgYiYKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy52ZXJpZmlhYmxlX2dpdmVhd2F5LmNvbnRyYWN0LmxpbmVhcl9zZWFyY2goYmluX2xpc3Q6IGJ5dGVzLCBrZXk6IHVpbnQ2NCkgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NDoKbGluZWFyX3NlYXJjaDoKICAgIHByb3RvIDIgMwogICAgZnJhbWVfZGlnIC0yCiAgICBsZW4KICAgIGludCAwCgpsaW5lYXJfc2VhcmNoX2Zvcl9oZWFkZXJAMToKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgMAogICAgPAogICAgYnogbGluZWFyX3NlYXJjaF9hZnRlcl9mb3JANgogICAgZnJhbWVfZGlnIC0yCiAgICBmcmFtZV9kaWcgMQogICAgZXh0cmFjdF91aW50MzIKICAgIGZyYW1lX2RpZyAtMQogICAgPT0KICAgIGJ6IGxpbmVhcl9zZWFyY2hfYWZ0ZXJfaWZfZWxzZUA0CiAgICBmcmFtZV9kaWcgMQogICAgZHVwCiAgICBpbnQgNAogICAgKwogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBleHRyYWN0X3VpbnQzMgogICAgaW50IDEKICAgIGNvdmVyIDIKICAgIHVuY292ZXIgNAogICAgdW5jb3ZlciA0CiAgICByZXRzdWIKCmxpbmVhcl9zZWFyY2hfYWZ0ZXJfaWZfZWxzZUA0OgogICAgZnJhbWVfZGlnIDEKICAgIGludCA4CiAgICArCiAgICBmcmFtZV9idXJ5IDEKICAgIGIgbGluZWFyX3NlYXJjaF9mb3JfaGVhZGVyQDEKCmxpbmVhcl9zZWFyY2hfYWZ0ZXJfZm9yQDY6CiAgICBpbnQgMAogICAgZHVwbiAyCiAgICB1bmNvdmVyIDQKICAgIHVuY292ZXIgNAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLnZlcmlmaWFibGVfZ2l2ZWF3YXkuY29udHJhY3QuVmVyaWZpYWJsZUdpdmVhd2F5LnVwZGF0ZSgpIC0+IHZvaWQ6CnVwZGF0ZToKICAgIHByb3RvIDAgMAogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuZGVsZXRlKCkgLT4gdm9pZDoKZGVsZXRlOgogICAgcHJvdG8gMCAwCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9naXZlYXdheS5jb250cmFjdC5WZXJpZmlhYmxlR2l2ZWF3YXkuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIGludCAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {
                "commitment": {
                    "type": "bytes",
                    "key": "commitment"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "VerifiableGiveaway",
        "methods": [
            {
                "name": "get_templated_randomness_beacon_id",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_templated_safety_round_gap",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "commit",
                "args": [
                    {
                        "type": "uint8",
                        "name": "delay"
                    },
                    {
                        "type": "uint32",
                        "name": "participants"
                    },
                    {
                        "type": "uint8",
                        "name": "winners"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reveal",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(byte[32],uint32[])"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
}