#pragma version 10

smart_contracts.verifiable_giveaway.contract.VerifiableGiveaway.approval_program:
    // smart_contracts/verifiable_giveaway/contract.py:45
    // class VerifiableGiveaway(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@6
    method "commit(uint8,uint8,uint8)void"
    method "reveal()(byte[],uint8[])"
    txna ApplicationArgs 0
    match main_commit_route@2 main_reveal_route@3
    err // reject transaction

main_commit_route@2:
    // smart_contracts/verifiable_giveaway/contract.py:57
    // @arc4.abimethod(allow_actions=[OnCompleteAction.NoOp, OnCompleteAction.OptIn])
    int 1
    txn OnCompletion
    shl
    int 3
    &
    assert // OnCompletion is one of NoOp, OptIn
    txn ApplicationID
    assert // is not creating
    // smart_contracts/verifiable_giveaway/contract.py:45
    // class VerifiableGiveaway(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    // smart_contracts/verifiable_giveaway/contract.py:57
    // @arc4.abimethod(allow_actions=[OnCompleteAction.NoOp, OnCompleteAction.OptIn])
    callsub commit
    int 1
    return

main_reveal_route@3:
    // smart_contracts/verifiable_giveaway/contract.py:79
    // @arc4.abimethod(allow_actions=[OnCompleteAction.NoOp, OnCompleteAction.CloseOut])
    int 1
    txn OnCompletion
    shl
    int 5
    &
    assert // OnCompletion is one of NoOp, CloseOut
    txn ApplicationID
    assert // is not creating
    callsub reveal
    swap
    dup
    len
    int 4
    +
    itob
    extract 6 2
    byte 0x0004
    swap
    concat
    swap
    concat
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@6:
    // smart_contracts/verifiable_giveaway/contract.py:45
    // class VerifiableGiveaway(ARC4Contract):
    txn OnCompletion
    switch main_create@7 main_reject_bare_on_completion@10 main_reject_bare_on_completion@10 main_reject_bare_on_completion@10 main_update@8 main_delete@9
    err // reject transaction

main_create@7:
    // smart_contracts/verifiable_giveaway/contract.py:45
    // class VerifiableGiveaway(ARC4Contract):
    txn ApplicationID
    !
    assert // is creating
    int 1
    return

main_update@8:
    // smart_contracts/verifiable_giveaway/contract.py:49
    // @arc4.baremethod(allow_actions=[OnCompleteAction.UpdateApplication])
    txn ApplicationID
    assert // is not creating
    // smart_contracts/verifiable_giveaway/contract.py:49-50
    // @arc4.baremethod(allow_actions=[OnCompleteAction.UpdateApplication])
    // def update(self) -> None:
    callsub update
    int 1
    return

main_delete@9:
    // smart_contracts/verifiable_giveaway/contract.py:53
    // @arc4.baremethod(allow_actions=[OnCompleteAction.DeleteApplication])
    txn ApplicationID
    assert // is not creating
    // smart_contracts/verifiable_giveaway/contract.py:53-54
    // @arc4.baremethod(allow_actions=[OnCompleteAction.DeleteApplication])
    // def delete(self) -> None:
    callsub delete
    int 1
    return

main_reject_bare_on_completion@10:
    // smart_contracts/verifiable_giveaway/contract.py:45
    // class VerifiableGiveaway(ARC4Contract):
    err // reject transaction


// smart_contracts.verifiable_giveaway.contract.VerifiableGiveaway.commit(delay: bytes, participants: bytes, winners: bytes) -> void:
commit:
    // smart_contracts/verifiable_giveaway/contract.py:57-60
    // @arc4.abimethod(allow_actions=[OnCompleteAction.NoOp, OnCompleteAction.OptIn])
    // def commit(
    //     self, delay: arc4.UInt8, participants: arc4.UInt8, winners: arc4.UInt8
    // ) -> None:
    proto 3 0
    // smart_contracts/verifiable_giveaway/contract.py:61
    // assert TemplateVar[UInt64]("SAFETY_ROUND_GAP") <= delay.native
    frame_dig -3
    btoi
    dup
    int 1
    >=
    assert
    // smart_contracts/verifiable_giveaway/contract.py:63
    // assert 1 <= winners.native
    frame_dig -1
    btoi
    dupn 2
    int 1
    >=
    assert
    // smart_contracts/verifiable_giveaway/contract.py:64
    // assert 2 <= participants.native
    frame_dig -2
    btoi
    dup
    cover 2
    int 2
    >=
    assert
    // smart_contracts/verifiable_giveaway/contract.py:66-67
    // # We don't need to actually check that participants is <= 255 because participants is arc4.UInt8
    // (winners.native <= 16)
    int 16
    <=
    // smart_contracts/verifiable_giveaway/contract.py:66-70
    // # We don't need to actually check that participants is <= 255 because participants is arc4.UInt8
    // (winners.native <= 16)
    // or (participants.native <= 80 and winners.native <= 20)
    // or (participants.native <= 47 and winners.native <= 25)
    // or (participants.native <= 35 and winners.native <= 30)
    bnz commit_bool_true@7
    // smart_contracts/verifiable_giveaway/contract.py:68
    // or (participants.native <= 80 and winners.native <= 20)
    frame_dig 2
    int 80
    <=
    bz commit_or_contd@3
    frame_dig 1
    int 20
    <=
    bnz commit_bool_true@7

commit_or_contd@3:
    // smart_contracts/verifiable_giveaway/contract.py:69
    // or (participants.native <= 47 and winners.native <= 25)
    frame_dig 2
    int 47
    <=
    bz commit_or_contd@5
    frame_dig 1
    int 25
    <=
    bnz commit_bool_true@7

commit_or_contd@5:
    // smart_contracts/verifiable_giveaway/contract.py:70
    // or (participants.native <= 35 and winners.native <= 30)
    frame_dig 2
    int 35
    <=
    bz commit_bool_false@8
    frame_dig 1
    int 30
    <=
    bz commit_bool_false@8

commit_bool_true@7:
    int 1
    b commit_bool_merge@9

commit_bool_false@8:
    int 0

commit_bool_merge@9:
    // smart_contracts/verifiable_giveaway/contract.py:65-71
    // assert (
    //     # We don't need to actually check that participants is <= 255 because participants is arc4.UInt8
    //     (winners.native <= 16)
    //     or (participants.native <= 80 and winners.native <= 20)
    //     or (participants.native <= 47 and winners.native <= 25)
    //     or (participants.native <= 35 and winners.native <= 30)
    // )
    assert
    // smart_contracts/verifiable_giveaway/contract.py:72
    // assert winners.native <= participants.native
    frame_dig 1
    frame_dig 2
    <=
    assert
    // smart_contracts/verifiable_giveaway/contract.py:76
    // Txn.tx_id + op.itob(Global.round + delay.native) + participants.bytes + winners.bytes
    txn TxID
    global Round
    frame_dig 0
    +
    itob
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    // smart_contracts/verifiable_giveaway/contract.py:74-75
    // # FIXME: It would be best to use a struct so that we have easier decoding off-chain.
    // self.active_commitment[Txn.sender] = (
    txn Sender
    byte "active_commitment"
    // smart_contracts/verifiable_giveaway/contract.py:74-77
    // # FIXME: It would be best to use a struct so that we have easier decoding off-chain.
    // self.active_commitment[Txn.sender] = (
    //     Txn.tx_id + op.itob(Global.round + delay.native) + participants.bytes + winners.bytes
    // )
    uncover 2
    app_local_put
    retsub


// smart_contracts.verifiable_giveaway.contract.VerifiableGiveaway.reveal() -> bytes, bytes:
reveal:
    // smart_contracts/verifiable_giveaway/contract.py:79-80
    // @arc4.abimethod(allow_actions=[OnCompleteAction.NoOp, OnCompleteAction.CloseOut])
    // def reveal(self) -> tuple[arc4.DynamicBytes, arc4.DynamicArray[arc4.UInt8]]:
    proto 0 2
    byte ""
    dup
    // smart_contracts/verifiable_giveaway/contract.py:81
    // committed_tx_id = arc4.DynamicBytes(self.active_commitment[Txn.sender][0:32])
    txn Sender
    int 0
    byte "active_commitment"
    app_local_get_ex
    assert // check active_commitment exists for account
    dup
    len
    dup
    int 0
    dig 2
    select
    swap
    int 32
    dig 1
    <
    int 32
    swap
    select
    dup2
    >
    dig 2
    swap
    select
    substring3
    dup
    len
    itob
    extract 6 2
    swap
    concat
    dup
    // smart_contracts/verifiable_giveaway/contract.py:83
    // self.active_commitment[Txn.sender][32:40]
    txn Sender
    int 0
    byte "active_commitment"
    app_local_get_ex
    assert // check active_commitment exists for account
    dup
    len
    int 32
    dig 1
    <
    swap
    dup
    int 32
    uncover 3
    select
    swap
    int 40
    dig 1
    <
    int 40
    swap
    select
    dup2
    >
    dig 2
    swap
    select
    substring3
    // smart_contracts/verifiable_giveaway/contract.py:86
    // self.active_commitment[Txn.sender][40:41]
    txn Sender
    int 0
    byte "active_commitment"
    app_local_get_ex
    assert // check active_commitment exists for account
    dup
    len
    int 40
    dig 1
    <
    swap
    dup
    int 40
    uncover 3
    select
    swap
    int 41
    dig 1
    <
    int 41
    swap
    select
    dup2
    >
    dig 2
    swap
    select
    substring3
    // smart_contracts/verifiable_giveaway/contract.py:85-87
    // committed_participants = arc4.UInt8.from_bytes(
    //     self.active_commitment[Txn.sender][40:41]
    // )
    swap
    // smart_contracts/verifiable_giveaway/contract.py:89
    // self.active_commitment[Txn.sender][41:42]
    txn Sender
    int 0
    byte "active_commitment"
    app_local_get_ex
    assert // check active_commitment exists for account
    dup
    len
    int 41
    dig 1
    <
    swap
    dup
    int 41
    uncover 3
    select
    swap
    int 42
    dig 1
    <
    int 42
    swap
    select
    dup2
    >
    dig 2
    swap
    select
    substring3
    // smart_contracts/verifiable_giveaway/contract.py:91
    // del self.active_commitment[Txn.sender]
    txn Sender
    byte "active_commitment"
    app_local_del
    // smart_contracts/verifiable_giveaway/contract.py:93
    // assert Global.round >= committed_block.native
    global Round
    dig 2
    btoi
    >=
    assert
    // smart_contracts/verifiable_giveaway/contract.py:95-103
    // entropy_call = itxn.ApplicationCall(
    //     app_id=TemplateVar[UInt64]("RANDOMNESS_BEACON_ID"),
    //     app_args=(
    //         arc4.arc4_signature("must_get(uint64,byte[])byte[]"),
    //         committed_block.bytes,
    //         committed_tx_id.bytes,
    //     ),
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/verifiable_giveaway/contract.py:96
    // app_id=TemplateVar[UInt64]("RANDOMNESS_BEACON_ID"),
    int 1001
    // smart_contracts/verifiable_giveaway/contract.py:102
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/verifiable_giveaway/contract.py:98
    // arc4.arc4_signature("must_get(uint64,byte[])byte[]"),
    method "must_get(uint64,byte[])byte[]"
    itxn_field ApplicationArgs
    uncover 2
    itxn_field ApplicationArgs
    uncover 3
    itxn_field ApplicationArgs
    itxn_field ApplicationID
    // smart_contracts/verifiable_giveaway/contract.py:95
    // entropy_call = itxn.ApplicationCall(
    int appl
    itxn_field TypeEnum
    // smart_contracts/verifiable_giveaway/contract.py:95-103
    // entropy_call = itxn.ApplicationCall(
    //     app_id=TemplateVar[UInt64]("RANDOMNESS_BEACON_ID"),
    //     app_args=(
    //         arc4.arc4_signature("must_get(uint64,byte[])byte[]"),
    //         committed_block.bytes,
    //         committed_tx_id.bytes,
    //     ),
    //     fee=0,
    // ).submit()
    itxn_submit
    itxn LastLog
    // smart_contracts/verifiable_giveaway/contract.py:105
    // vrf_output = arc4.DynamicBytes.from_log(entropy_call.last_log)
    dup
    extract 4 0
    swap
    extract 0 4
    byte 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    // smart_contracts/verifiable_giveaway/contract.py:107
    // state1, state2, state3, state4 = pcg128_init(vrf_output.native)
    extract 2 0
    callsub pcg128_init
    cover 5
    cover 4
    cover 3
    cover 2
    // smart_contracts/verifiable_giveaway/contract.py:131
    // )[: committed_participants.native]
    swap
    btoi
    dup
    cover 2
    // smart_contracts/verifiable_giveaway/contract.py:109-131
    // # Knuth shuffle.
    // # We use a "truncated" version of the algorithm where we stop after "winners" iterations.
    // # The array to be shuffled is an array with the numbers from 1 to "participants".
    // # Since we have constrained "participants", we can populate the array in constant time
    // #  by slicing a pre-computed bytearray with numbers from 1 to 255 (arc4.UInt8 max value).
    // participants = Bytes.from_hex(
    //     "0102030405060708090a0b0c0d0e0f10"
    //     "1112131415161718191a1b1c1d1e1f20"
    //     "2122232425262728292a2b2c2d2e2f30"
    //     "3132333435363738393a3b3c3d3e3f40"
    //     "4142434445464748494a4b4c4d4e4f50"
    //     "5152535455565758595a5b5c5d5e5f60"
    //     "6162636465666768696a6b6c6d6e6f70"
    //     "7172737475767778797a7b7c7d7e7f80"
    //     "8182838485868788898a8b8c8d8e8f90"
    //     "9192939495969798999a9b9c9d9e9fa0"
    //     "a1a2a3a4a5a6a7a8a9aaabacadaeafb0"
    //     "b1b2b3b4b5b6b7b8b9babbbcbdbebfc0"
    //     "c1c2c3c4c5c6c7c8c9cacbcccdcecfd0"
    //     "d1d2d3d4d5d6d7d8d9dadbdcdddedfe0"
    //     "e1e2e3e4e5e6e7e8e9eaebecedeeeff0"
    //     "f1f2f3f4f5f6f7f8f9fafbfcfdfeff"
    // )[: committed_participants.native]
    dup
    int 255
    <
    int 255
    dig 2
    uncover 2
    select
    byte 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff
    int 0
    uncover 2
    substring3
    cover 2
    // smart_contracts/verifiable_giveaway/contract.py:137-138
    // # We know that, by construction, "winners" <= "participants".
    // if committed_winners.native < committed_participants.native
    swap
    btoi
    dup
    uncover 2
    <
    // smart_contracts/verifiable_giveaway/contract.py:136-139
    // committed_winners.native
    // # We know that, by construction, "winners" <= "participants".
    // if committed_winners.native < committed_participants.native
    // else committed_participants.native - 1
    bz reveal_ternary_false@3
    frame_dig 9
    frame_bury 1
    b reveal_ternary_merge@4

reveal_ternary_false@3:
    // smart_contracts/verifiable_giveaway/contract.py:136-139
    // committed_winners.native
    // # We know that, by construction, "winners" <= "participants".
    // if committed_winners.native < committed_participants.native
    // else committed_participants.native - 1
    frame_dig 7
    // smart_contracts/verifiable_giveaway/contract.py:139
    // else committed_participants.native - 1
    int 1
    -
    frame_bury 1

reveal_ternary_merge@4:
    // smart_contracts/verifiable_giveaway/contract.py:141-143
    // # FIXME: We should check how much fee was provided for this call. If it's too much it's a draining attack
    // #  and the contract should protect the user/funding account.
    // ensure_budget(700 * n_shuffles, OpUpFeeSource.GroupCredit)
    int 700
    frame_dig 1
    *
    int 0
    callsub ensure_budget
    // smart_contracts/verifiable_giveaway/contract.py:144
    // for i in urange(n_shuffles):
    int 0
    frame_bury 0

reveal_for_header@5:
    // smart_contracts/verifiable_giveaway/contract.py:144
    // for i in urange(n_shuffles):
    frame_dig 0
    frame_dig 1
    <
    bz reveal_after_for@9
    // smart_contracts/verifiable_giveaway/contract.py:147
    // BigUInt(i),
    frame_dig 0
    dup
    itob
    // smart_contracts/verifiable_giveaway/contract.py:148
    // BigUInt(committed_participants.native),
    frame_dig 7
    itob
    // smart_contracts/verifiable_giveaway/contract.py:145-150
    // state1, state2, state3, state4, r_bytes = pcg128_random(
    //     (state1, state2, state3, state4),
    //     BigUInt(i),
    //     BigUInt(committed_participants.native),
    //     UInt64(1),
    // )
    frame_dig 6
    frame_dig 5
    frame_dig 4
    frame_dig 3
    uncover 5
    uncover 5
    // smart_contracts/verifiable_giveaway/contract.py:149
    // UInt64(1),
    int 1
    // smart_contracts/verifiable_giveaway/contract.py:145-150
    // state1, state2, state3, state4, r_bytes = pcg128_random(
    //     (state1, state2, state3, state4),
    //     BigUInt(i),
    //     BigUInt(committed_participants.native),
    //     UInt64(1),
    // )
    callsub pcg128_random
    cover 4
    frame_bury 3
    frame_bury 4
    frame_bury 5
    frame_bury 6
    // smart_contracts/verifiable_giveaway/contract.py:151
    // r = op.getbyte(r_bytes, 17)
    int 17
    getbyte
    // smart_contracts/verifiable_giveaway/contract.py:152
    // participants_i = op.getbyte(participants, i)
    frame_dig 8
    dup
    dig 3
    getbyte
    cover 3
    // smart_contracts/verifiable_giveaway/contract.py:153
    // participants_r = op.getbyte(participants, r)
    dup
    dig 2
    getbyte
    // smart_contracts/verifiable_giveaway/contract.py:154
    // participants = op.setbyte(participants, i, participants_r)
    dig 3
    swap
    setbyte
    // smart_contracts/verifiable_giveaway/contract.py:155
    // participants = op.setbyte(participants, r, participants_i)
    swap
    uncover 3
    setbyte
    frame_bury 8
    // smart_contracts/verifiable_giveaway/contract.py:144
    // for i in urange(n_shuffles):
    int 1
    +
    frame_bury 0
    b reveal_for_header@5

reveal_after_for@9:
    // smart_contracts/verifiable_giveaway/contract.py:158
    // arc4.UInt16(committed_winners.native).bytes
    frame_dig 9
    dup
    itob
    extract 6 2
    swap
    // smart_contracts/verifiable_giveaway/contract.py:159
    // + participants[: committed_winners.native]
    frame_dig 8
    dup
    cover 2
    len
    dup2
    <
    swap
    uncover 2
    uncover 2
    select
    int 0
    swap
    substring3
    // smart_contracts/verifiable_giveaway/contract.py:158-159
    // arc4.UInt16(committed_winners.native).bytes
    // + participants[: committed_winners.native]
    concat
    // smart_contracts/verifiable_giveaway/contract.py:157-160
    // return committed_tx_id.copy(), arc4.DynamicArray[arc4.UInt8].from_bytes(
    //     arc4.UInt16(committed_winners.native).bytes
    //     + participants[: committed_winners.native]
    // )
    frame_dig 2
    frame_bury 0
    frame_bury 1
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.pcg128_init(seed: bytes) -> uint64, uint64, uint64, uint64:
pcg128_init:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:17-18
    // @subroutine
    // def pcg128_init(seed: Bytes) -> tuple[UInt64, UInt64, UInt64, UInt64]:
    proto 1 4
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:19
    // assert seed.length == 32
    frame_dig -1
    len
    int 32
    ==
    assert
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:22
    // __pcg32_init(op.extract_uint64(seed, 0), UInt64(PCG_DEFAULT_INCREMENT)),
    frame_dig -1
    int 0
    extract_uint64
    int 1442695040888963407
    callsub __pcg32_init
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:24
    // op.extract_uint64(seed, 8), UInt64(PCG_SECONDARY_DEFAULT_INCREMENT)
    frame_dig -1
    int 8
    extract_uint64
    int 1442695040888963409
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:23-25
    // __pcg32_init(
    //     op.extract_uint64(seed, 8), UInt64(PCG_SECONDARY_DEFAULT_INCREMENT)
    // ),
    callsub __pcg32_init
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:27
    // op.extract_uint64(seed, 16), UInt64(PCG_TERTIARY_DEFAULT_INCREMENT)
    frame_dig -1
    int 16
    extract_uint64
    int 1442695040888963411
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:26-28
    // __pcg32_init(
    //     op.extract_uint64(seed, 16), UInt64(PCG_TERTIARY_DEFAULT_INCREMENT)
    // ),
    callsub __pcg32_init
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:30
    // op.extract_uint64(seed, 24), UInt64(PCG_QUATERNARY_DEFAULT_INCREMENT)
    frame_dig -1
    int 24
    extract_uint64
    int 1442695040888963413
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:29-31
    // __pcg32_init(
    //     op.extract_uint64(seed, 24), UInt64(PCG_QUATERNARY_DEFAULT_INCREMENT)
    // ),
    callsub __pcg32_init
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:21-32
    // return (
    //     __pcg32_init(op.extract_uint64(seed, 0), UInt64(PCG_DEFAULT_INCREMENT)),
    //     __pcg32_init(
    //         op.extract_uint64(seed, 8), UInt64(PCG_SECONDARY_DEFAULT_INCREMENT)
    //     ),
    //     __pcg32_init(
    //         op.extract_uint64(seed, 16), UInt64(PCG_TERTIARY_DEFAULT_INCREMENT)
    //     ),
    //     __pcg32_init(
    //         op.extract_uint64(seed, 24), UInt64(PCG_QUATERNARY_DEFAULT_INCREMENT)
    //     ),
    // )
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_init(initial_state: uint64, incr: uint64) -> uint64:
__pcg32_init:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:61-62
    // @subroutine
    // def __pcg32_init(initial_state: UInt64, incr: UInt64) -> UInt64:
    proto 2 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:63
    // state = __pcg32_step(UInt64(0), incr)
    int 0
    frame_dig -1
    callsub __pcg32_step
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:64
    // _high_addw, state = op.addw(state, initial_state)
    frame_dig -2
    addw
    bury 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:66
    // return __pcg32_step(state, incr)
    frame_dig -1
    callsub __pcg32_step
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_step(state: uint64, incr: uint64) -> uint64:
__pcg32_step:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:69-70
    // @subroutine
    // def __pcg32_step(state: UInt64, incr: UInt64) -> UInt64:
    proto 2 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:71
    // _high_mul, low_mul = op.mulw(state, PCG_DEFAULT_MULTIPLIER)
    frame_dig -2
    int 6364136223846793005
    mulw
    bury 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:72
    // _high_add, low_add = op.addw(low_mul, incr)
    frame_dig -1
    addw
    bury 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:74
    // return low_add
    retsub


// algopy.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    // <algopy>/algopy.py:11-17
    proto 2 0
    // <algopy>/algopy.py:18
    frame_dig -2
    int 10
    +

ensure_budget_while_top@1:
    // <algopy>/algopy.py:19
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    // <algopy>/algopy.py:20
    itxn_begin
    // <algopy>/algopy.py:21
    int appl
    itxn_field TypeEnum
    // <algopy>/algopy.py:22
    int DeleteApplication
    itxn_field OnCompletion
    // <algopy>/algopy.py:23
    byte 0x068101
    itxn_field ApprovalProgram
    // <algopy>/algopy.py:24
    byte 0x068101
    itxn_field ClearStateProgram
    // <algopy>/algopy.py:25-29
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    // <algopy>/algopy.py:27
    int 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_1@4:
    // <algopy>/algopy.py:29
    global MinTxnFee
    itxn_field Fee

ensure_budget_switch_case_next@6:
    // <algopy>/algopy.py:30
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_after_while@7:
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.pcg128_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64, lower_bound: bytes, upper_bound: bytes, length: uint64) -> uint64, uint64, uint64, uint64, bytes:
pcg128_random:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:92-98
    // @subroutine
    // def pcg128_random(
    //     state: tuple[UInt64, UInt64, UInt64, UInt64],
    //     lower_bound: BigUInt,
    //     upper_bound: BigUInt,
    //     length: UInt64,
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64, Bytes]:
    proto 7 5
    int 0
    dupn 2
    byte ""
    dupn 4
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:101
    // assert length < 2**16
    frame_dig -1
    int 65536
    <
    assert
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:102
    // result += arc4.UInt16(length).bytes
    frame_dig -1
    itob
    extract 6 2
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:105
    // if lower_bound == 0 and upper_bound == 0:
    frame_dig -3
    byte 0x
    b==
    bz pcg128_random_else_body@8
    frame_dig -2
    byte 0x
    b==
    bz pcg128_random_else_body@8
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:106
    // for i in urange(length):  # noqa: B007
    int 0
    frame_dig -4
    frame_bury 7
    frame_dig -5
    frame_bury 6
    frame_dig -6
    frame_bury 5
    frame_dig -7
    frame_bury 4
    frame_bury 3

pcg128_random_for_header@3:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:106
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    frame_dig -1
    <
    bz pcg128_random_after_if_else@22
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:107-109
    // state1, state2, state3, state4, n = __pcg128_random(
    //     (state1, state2, state3, state4)
    // )
    frame_dig 4
    frame_dig 5
    frame_dig 6
    frame_dig 7
    callsub __pcg128_random
    cover 4
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_bury 4
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:111
    // result += n.bytes
    frame_dig 8
    swap
    concat
    frame_bury 8
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:106
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg128_random_for_header@3

pcg128_random_else_body@8:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:113
    // if upper_bound != 0:
    frame_dig -2
    byte 0x
    b!=
    bz pcg128_random_else_body@10
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:114
    // assert upper_bound > BigUInt(1)
    frame_dig -2
    byte 0x01
    b>
    assert
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:115
    // assert upper_bound < BigUInt(2**128)
    frame_dig -2
    byte 0x0100000000000000000000000000000000
    b<
    assert
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:116
    // assert lower_bound < upper_bound - BigUInt(1)
    frame_dig -2
    byte 0x01
    b-
    frame_dig -3
    b>
    assert
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:118
    // absolute_bound = upper_bound - lower_bound
    frame_dig -2
    frame_dig -3
    b-
    frame_bury 0
    b pcg128_random_after_if_else@11

pcg128_random_else_body@10:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:120
    // assert lower_bound < BigUInt(2**128 - 1)
    frame_dig -3
    byte 0xffffffffffffffffffffffffffffffff
    b<
    assert
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:122
    // absolute_bound = BigUInt(2**128) - lower_bound
    byte 0x0100000000000000000000000000000000
    frame_dig -3
    b-
    frame_bury 0

pcg128_random_after_if_else@11:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:124
    // threshold = __pcg128_twos(absolute_bound) % absolute_bound
    frame_dig 0
    dup
    callsub __pcg128_twos
    swap
    b%
    frame_bury 2
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:126
    // for i in urange(length):  # noqa: B007
    int 0
    frame_dig -4
    frame_bury 7
    frame_dig -5
    frame_bury 6
    frame_dig -6
    frame_bury 5
    frame_dig -7
    frame_bury 4
    frame_bury 3

pcg128_random_for_header@12:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:126
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    frame_dig -1
    <
    bz pcg128_random_after_for@21

pcg128_random_while_top@14:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:128-130
    // state1, state2, state3, state4, candidate = __pcg128_random(
    //     (state1, state2, state3, state4)
    // )
    frame_dig 4
    frame_dig 5
    frame_dig 6
    frame_dig 7
    callsub __pcg128_random
    dup
    cover 5
    frame_bury 1
    frame_bury 7
    frame_bury 6
    frame_bury 5
    frame_bury 4
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:131
    // if candidate >= threshold:
    frame_dig 2
    b>=
    bz pcg128_random_while_top@14
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:133
    // result += arc4.UInt128((candidate % absolute_bound) + lower_bound).bytes
    frame_dig 1
    frame_dig 0
    b%
    frame_dig -3
    b+
    dup
    len
    int 16
    <=
    assert // overflow
    int 16
    bzero
    b|
    frame_dig 8
    swap
    concat
    frame_bury 8
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:126
    // for i in urange(length):  # noqa: B007
    frame_dig 3
    int 1
    +
    frame_bury 3
    b pcg128_random_for_header@12

pcg128_random_after_for@21:

pcg128_random_after_if_else@22:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:135
    // return state1, state2, state3, state4, result
    frame_dig 4
    frame_dig 5
    frame_dig 6
    frame_dig 7
    frame_dig 8
    frame_bury 4
    frame_bury 3
    frame_bury 2
    frame_bury 1
    frame_bury 0
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.__pcg128_random(state.0: uint64, state.1: uint64, state.2: uint64, state.3: uint64) -> uint64, uint64, uint64, uint64, bytes:
__pcg128_random:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:35-38
    // @subroutine
    // def __pcg128_random(
    //     state: tuple[UInt64, UInt64, UInt64, UInt64]
    // ) -> tuple[UInt64, UInt64, UInt64, UInt64, BigUInt]:
    proto 4 5
    byte ""
    dup
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:39
    // new_state1, rn1 = __pcg32_random(state[0])
    frame_dig -4
    callsub __pcg32_random
    swap
    dup
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:42
    // UInt64(0) if new_state1 != 0 else UInt64(1)
    bz __pcg128_random_ternary_false@2
    int 0
    b __pcg128_random_ternary_merge@3

__pcg128_random_ternary_false@2:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:42
    // UInt64(0) if new_state1 != 0 else UInt64(1)
    int 1

__pcg128_random_ternary_merge@3:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:41
    // cond_incr = PCG_SECONDARY_DEFAULT_INCREMENT << (
    int 1442695040888963409
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:41-43
    // cond_incr = PCG_SECONDARY_DEFAULT_INCREMENT << (
    //     UInt64(0) if new_state1 != 0 else UInt64(1)
    // )
    swap
    shl
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:44
    // new_state2 = __pcg32_step(state[1], cond_incr)
    frame_dig -3
    swap
    callsub __pcg32_step
    dup
    frame_bury 0
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:47
    // UInt64(0) if new_state2 != 0 else UInt64(1)
    bz __pcg128_random_ternary_false@5
    int 0
    b __pcg128_random_ternary_merge@6

__pcg128_random_ternary_false@5:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:47
    // UInt64(0) if new_state2 != 0 else UInt64(1)
    int 1

__pcg128_random_ternary_merge@6:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:46
    // cond_incr = PCG_TERTIARY_DEFAULT_INCREMENT << (
    int 1442695040888963411
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:46-48
    // cond_incr = PCG_TERTIARY_DEFAULT_INCREMENT << (
    //     UInt64(0) if new_state2 != 0 else UInt64(1)
    // )
    swap
    shl
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:49
    // new_state3 = __pcg32_step(state[2], cond_incr)
    frame_dig -2
    swap
    callsub __pcg32_step
    dup
    frame_bury 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:52
    // UInt64(0) if new_state3 != 0 else UInt64(1)
    bz __pcg128_random_ternary_false@8
    int 0
    b __pcg128_random_ternary_merge@9

__pcg128_random_ternary_false@8:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:52
    // UInt64(0) if new_state3 != 0 else UInt64(1)
    int 1

__pcg128_random_ternary_merge@9:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:51
    // cond_incr = PCG_QUATERNARY_DEFAULT_INCREMENT << (
    int 1442695040888963413
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:51-53
    // cond_incr = PCG_QUATERNARY_DEFAULT_INCREMENT << (
    //     UInt64(0) if new_state3 != 0 else UInt64(1)
    // )
    swap
    shl
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:54
    // new_state4 = __pcg32_step(state[3], cond_incr)
    frame_dig -1
    swap
    callsub __pcg32_step
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:62
    // op.itob(rn1 << 32 | __pcg32_output(state[1]))
    frame_dig 2
    int 32
    shl
    frame_dig -3
    callsub __pcg32_output
    |
    itob
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:63
    // + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    frame_dig -2
    callsub __pcg32_output
    int 32
    shl
    frame_dig -1
    callsub __pcg32_output
    |
    itob
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:62-63
    // op.itob(rn1 << 32 | __pcg32_output(state[1]))
    // + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    concat
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:56-65
    // return (
    //     new_state1,
    //     new_state2,
    //     new_state3,
    //     new_state4,
    //     BigUInt.from_bytes(
    //         op.itob(rn1 << 32 | __pcg32_output(state[1]))
    //         + op.itob(__pcg32_output(state[2]) << 32 | __pcg32_output(state[3]))
    //     ),
    // )
    frame_dig 3
    frame_dig 0
    frame_dig 1
    uncover 4
    uncover 4
    uncover 8
    uncover 8
    uncover 8
    uncover 8
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_random(state: uint64) -> uint64, uint64:
__pcg32_random:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:77-78
    // @subroutine
    // def __pcg32_random(state: UInt64) -> tuple[UInt64, UInt64]:
    proto 1 2
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:79
    // return __pcg32_step(state, UInt64(PCG_DEFAULT_INCREMENT)), __pcg32_output(state)
    frame_dig -1
    int 1442695040888963407
    callsub __pcg32_step
    frame_dig -1
    callsub __pcg32_output
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_output(value: uint64) -> uint64:
__pcg32_output:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:82-83
    // @subroutine
    // def __pcg32_output(value: UInt64) -> UInt64:
    proto 1 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:85
    // __mask_to_32bits(((value >> 18) ^ value) >> 27), value >> 59
    frame_dig -1
    int 18
    shr
    frame_dig -1
    ^
    int 27
    shr
    callsub __mask_to_32bits
    frame_dig -1
    int 59
    shr
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:84-86
    // return __pcg32_rotation(
    //     __mask_to_32bits(((value >> 18) ^ value) >> 27), value >> 59
    // )
    callsub __pcg32_rotation
    retsub


// lib_pcg.xsh_rr_64_32.__mask_to_32bits(value: uint64) -> uint64:
__mask_to_32bits:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:101-102
    // @subroutine
    // def __mask_to_32bits(value: UInt64) -> UInt64:
    proto 1 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:103
    // return value & ((2**32) - 1)
    frame_dig -1
    int 4294967295
    &
    retsub


// lib_pcg.xsh_rr_64_32.__pcg32_rotation(value: uint64, rot: uint64) -> uint64:
__pcg32_rotation:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:89-90
    // @subroutine
    // def __pcg32_rotation(value: UInt64, rot: UInt64) -> UInt64:
    proto 2 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:91
    // return (value >> rot) | __mask_to_32bits(value << (__uint64_twos(rot) & 31))
    frame_dig -2
    frame_dig -1
    shr
    frame_dig -1
    callsub __uint64_twos
    int 31
    &
    frame_dig -2
    swap
    shl
    callsub __mask_to_32bits
    |
    retsub


// lib_pcg.xsh_rr_64_32.__uint64_twos(value: uint64) -> uint64:
__uint64_twos:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:94-95
    // @subroutine
    // def __uint64_twos(value: UInt64) -> UInt64:
    proto 1 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:96
    // addw_high, addw_low = op.addw(~value, 1)
    frame_dig -1
    ~
    int 1
    addw
    bury 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_64_32.py:98
    // return addw_low
    retsub


// lib_pcg.xsh_rr_quadruple_64_32.__pcg128_twos(value: bytes) -> bytes:
__pcg128_twos:
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:68-73
    // # There's no way to write a general uint512 two's complement because there's no way to get a larger number than
    // #  an uint512 like we can do for uint64 with wide math.
    // # Fortunately, we don't use uint512. This code works assuming that "value: BigUInt" is an uint256.
    // # This code will prevent a native overflow and return a correctly masked uint256.
    // @subroutine
    // def __pcg128_twos(value: BigUInt) -> BigUInt:
    proto 1 1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:75-81
    // value
    // ^ BigUInt.from_bytes(
    //     b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // )
    frame_dig -1
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:77-80
    // b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    byte 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:75-81
    // value
    // ^ BigUInt.from_bytes(
    //     b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // )
    b^
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:82
    // ) + BigUInt(1)
    byte 0x01
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:74-82
    // wide_value_compl = (
    //     value
    //     ^ BigUInt.from_bytes(
    //         b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //         + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //         + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //         + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     )
    // ) + BigUInt(1)
    b+
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:85-88
    // b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    byte 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff
    // .venv/lib/python3.12/site-packages/lib_pcg/xsh_rr_quadruple_64_32.py:84-89
    // return wide_value_compl & BigUInt.from_bytes(
    //     b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\x00\x00\x00\x00\x00\x00\x00\x00"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    //     + b"\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
    // )
    b&
    retsub


// smart_contracts.verifiable_giveaway.contract.VerifiableGiveaway.update() -> void:
update:
    // smart_contracts/verifiable_giveaway/contract.py:49-50
    // @arc4.baremethod(allow_actions=[OnCompleteAction.UpdateApplication])
    // def update(self) -> None:
    proto 0 0
    // smart_contracts/verifiable_giveaway/contract.py:51
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub


// smart_contracts.verifiable_giveaway.contract.VerifiableGiveaway.delete() -> void:
delete:
    // smart_contracts/verifiable_giveaway/contract.py:53-54
    // @arc4.baremethod(allow_actions=[OnCompleteAction.DeleteApplication])
    // def delete(self) -> None:
    proto 0 0
    // smart_contracts/verifiable_giveaway/contract.py:55
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    retsub