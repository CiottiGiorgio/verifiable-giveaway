{
    "hints": {
        "get_templated_randomness_beacon_id()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_templated_opup_id()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_templated_safety_round_gap()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "commit(uint8,uint32,uint8)void": {
            "call_config": {
                "no_op": "CALL",
                "opt_in": "CALL"
            }
        },
        "reveal()(byte[32],uint32[])": {
            "call_config": {
                "no_op": "CALL",
                "close_out": "CALL"
            },
            "structs": {
                "output": {
                    "name": "Reveal",
                    "elements": [
                        [
                            "commitment_tx_id",
                            "byte[32]"
                        ],
                        [
                            "winners",
                            "uint32[]"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9zaHVmZmxlLmNvbnRyYWN0LlZlcmlmaWFibGVTaHVmZmxlLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 1,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {
                "commitment": {
                    "type": "bytes",
                    "key": "commitment"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "VerifiableShuffle",
        "methods": [
            {
                "name": "get_templated_randomness_beacon_id",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_templated_opup_id",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "get_templated_safety_round_gap",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "commit",
                "args": [
                    {
                        "type": "uint8",
                        "name": "delay"
                    },
                    {
                        "type": "uint32",
                        "name": "participants"
                    },
                    {
                        "type": "uint8",
                        "name": "winners"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reveal",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(byte[32],uint32[])"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "delete_application": "CALL",
        "no_op": "CREATE"
    }
}