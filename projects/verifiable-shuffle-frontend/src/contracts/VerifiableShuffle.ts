/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "get_templated_randomness_beacon_id()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_templated_opup_id()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_templated_safety_round_gap()uint64": {
      "read_only": true,
      "call_config": {
        "no_op": "CALL"
      }
    },
    "commit(uint8,uint32,uint8)void": {
      "call_config": {
        "no_op": "CALL",
        "opt_in": "CALL"
      }
    },
    "reveal()(byte[32],uint32[])": {
      "call_config": {
        "no_op": "CALL",
        "close_out": "CALL"
      },
      "structs": {
        "output": {
          "name": "Reveal",
          "elements": [
            [
              "commitment_tx_id",
              "byte[32]"
            ],
            [
              "winners",
              "uint32[]"
            ]
          ]
        }
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMudmVyaWZpYWJsZV9zaHVmZmxlLmNvbnRyYWN0LlZlcmlmaWFibGVTaHVmZmxlLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 1,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {}
    },
    "local": {
      "declared": {
        "commitment": {
          "type": "bytes",
          "key": "commitment"
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "VerifiableShuffle",
    "methods": [
      {
        "name": "get_templated_randomness_beacon_id",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_templated_opup_id",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "get_templated_safety_round_gap",
        "args": [],
        "readonly": true,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "commit",
        "args": [
          {
            "type": "uint8",
            "name": "delay"
          },
          {
            "type": "uint32",
            "name": "participants"
          },
          {
            "type": "uint8",
            "name": "winners"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "reveal",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "(byte[32],uint32[])"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "update_application": "CALL",
    "delete_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the VerifiableShuffle smart contract.
 */
export type VerifiableShuffle = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'get_templated_randomness_beacon_id()uint64' | 'get_templated_randomness_beacon_id', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_templated_opup_id()uint64' | 'get_templated_opup_id', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'get_templated_safety_round_gap()uint64' | 'get_templated_safety_round_gap', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'commit(uint8,uint32,uint8)void' | 'commit', {
      argsObj: {
        delay: number
        participants: number
        winners: number
      }
      argsTuple: [delay: number, participants: number, winners: number]
      returns: void
    }>
    & Record<'reveal()(byte[32],uint32[])' | 'reveal', {
      argsObj: {
      }
      argsTuple: []
      returns: Reveal
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    local: {
      commitment?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VerifiableShuffleSig = keyof VerifiableShuffle['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VerifiableShuffleSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Reveal result as a struct
 */
export type Reveal = {
  commitmentTxId: Uint8Array
  winners: number[]
}
/**
 * Converts the tuple representation of a Reveal to the struct representation
 */
export function Reveal([commitmentTxId, winners]: [Uint8Array, number[]] ) {
  return {
    commitmentTxId,
    winners,
  }
}
/**
 * Maps a method signature from the VerifiableShuffle smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VerifiableShuffleSig> = VerifiableShuffle['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VerifiableShuffle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VerifiableShuffleSig> = VerifiableShuffle['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VerifiableShuffleCreateCalls = (typeof VerifiableShuffleCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VerifiableShuffleCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type VerifiableShuffleUpdateCalls = (typeof VerifiableShuffleCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type VerifiableShuffleUpdateCallParams =
  | TypedCallParams<undefined>
/**
 * A factory for available 'delete' calls
 */
export type VerifiableShuffleDeleteCalls = (typeof VerifiableShuffleCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type VerifiableShuffleDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type VerifiableShuffleDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VerifiableShuffleCreateCalls) => VerifiableShuffleCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: VerifiableShuffleUpdateCalls) => VerifiableShuffleUpdateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: VerifiableShuffleDeleteCalls) => VerifiableShuffleDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VerifiableShuffleCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the VerifiableShuffle smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the VerifiableShuffle smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the VerifiableShuffle smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the VerifiableShuffle smart contract using the commit(uint8,uint32,uint8)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'commit(uint8,uint32,uint8)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.delay, args.participants, args.winners],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available closeOut call factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs a close out call for the VerifiableShuffle smart contract using the reveal()(byte[32],uint32[]) ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'reveal()(byte[32],uint32[])' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the get_templated_randomness_beacon_id()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTemplatedRandomnessBeaconId(args: MethodArgs<'get_templated_randomness_beacon_id()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_templated_randomness_beacon_id()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_templated_opup_id()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTemplatedOpupId(args: MethodArgs<'get_templated_opup_id()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_templated_opup_id()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_templated_safety_round_gap()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getTemplatedSafetyRoundGap(args: MethodArgs<'get_templated_safety_round_gap()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_templated_safety_round_gap()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the commit(uint8,uint32,uint8)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'commit(uint8,uint32,uint8)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delay, args.participants, args.winners],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reveal()(byte[32],uint32[]) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reveal()(byte[32],uint32[])' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the VerifiableShuffle smart contract
 */
export class VerifiableShuffleClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VerifiableShuffleClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof VerifiableShuffle['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the VerifiableShuffle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: VerifiableShuffleDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VerifiableShuffleCallFactory.create)
    const updateArgs = params.updateCall?.(VerifiableShuffleCallFactory.update)
    const deleteArgs = params.deleteCall?.(VerifiableShuffleCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the VerifiableShuffle smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the VerifiableShuffle smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The update result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined, AppUpdateCallTransactionResult>(await $this.appClient.update(args))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the VerifiableShuffle smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<undefined>(await $this.appClient.delete(args))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the VerifiableShuffle smart contract using the commit(uint8,uint32,uint8)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'commit(uint8,uint32,uint8)void'>>(await $this.appClient.optIn(VerifiableShuffleCallFactory.optIn.commit(args, params)))
      },
    }
  }

  /**
   * Gets available closeOut methods
   */
  public get closeOut() {
    const $this = this
    return {
      /**
       * Makes a close out call to an existing instance of the VerifiableShuffle smart contract using the reveal()(byte[32],uint32[]) ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The closeOut result
       */
      async reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'reveal()(byte[32],uint32[])'>>(await $this.appClient.closeOut(VerifiableShuffleCallFactory.closeOut.reveal(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the VerifiableShuffle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the get_templated_randomness_beacon_id()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getTemplatedRandomnessBeaconId(args: MethodArgs<'get_templated_randomness_beacon_id()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VerifiableShuffleCallFactory.getTemplatedRandomnessBeaconId(args, params))
  }

  /**
   * Calls the get_templated_opup_id()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getTemplatedOpupId(args: MethodArgs<'get_templated_opup_id()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VerifiableShuffleCallFactory.getTemplatedOpupId(args, params))
  }

  /**
   * Calls the get_templated_safety_round_gap()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getTemplatedSafetyRoundGap(args: MethodArgs<'get_templated_safety_round_gap()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VerifiableShuffleCallFactory.getTemplatedSafetyRoundGap(args, params))
  }

  /**
   * Calls the commit(uint8,uint32,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VerifiableShuffleCallFactory.commit(args, params))
  }

  /**
   * Calls the reveal()(byte[32],uint32[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VerifiableShuffleCallFactory.reveal(args, params), Reveal)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<VerifiableShuffle['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get commitment() {
        return VerifiableShuffleClient.getBinaryState(state, 'commitment')
      },
    }
  }

  public compose(): VerifiableShuffleComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      getTemplatedRandomnessBeaconId(args: MethodArgs<'get_templated_randomness_beacon_id()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTemplatedRandomnessBeaconId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getTemplatedOpupId(args: MethodArgs<'get_templated_opup_id()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTemplatedOpupId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getTemplatedSafetyRoundGap(args: MethodArgs<'get_templated_safety_round_gap()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getTemplatedSafetyRoundGap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.commit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reveal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Reveal)
        return this
      },
      get update() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.update.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.commit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get closeOut() {
        const $this = this
        return {
          reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.closeOut.reveal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(Reveal)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as VerifiableShuffleComposer
  }
}
export type VerifiableShuffleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the get_templated_randomness_beacon_id()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTemplatedRandomnessBeaconId(args: MethodArgs<'get_templated_randomness_beacon_id()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, MethodReturn<'get_templated_randomness_beacon_id()uint64'>]>

  /**
   * Calls the get_templated_opup_id()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTemplatedOpupId(args: MethodArgs<'get_templated_opup_id()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, MethodReturn<'get_templated_opup_id()uint64'>]>

  /**
   * Calls the get_templated_safety_round_gap()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTemplatedSafetyRoundGap(args: MethodArgs<'get_templated_safety_round_gap()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, MethodReturn<'get_templated_safety_round_gap()uint64'>]>

  /**
   * Calls the commit(uint8,uint32,uint8)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, MethodReturn<'commit(uint8,uint32,uint8)void'>]>

  /**
   * Calls the reveal()(byte[32],uint32[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, MethodReturn<'reveal()(byte[32],uint32[])'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the VerifiableShuffle smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & AppClientCompilationParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the VerifiableShuffle smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the VerifiableShuffle smart contract using the commit(uint8,uint32,uint8)void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    commit(args: MethodArgs<'commit(uint8,uint32,uint8)void'>, params?: AppClientComposeCallCoreParams): VerifiableShuffleComposer<[...TReturns, MethodReturn<'commit(uint8,uint32,uint8)void'>]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the VerifiableShuffle smart contract using the reveal()(byte[32],uint32[]) ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    reveal(args: MethodArgs<'reveal()(byte[32],uint32[])'>, params?: AppClientComposeCallCoreParams): VerifiableShuffleComposer<[...TReturns, MethodReturn<'reveal()(byte[32],uint32[])'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the VerifiableShuffle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): VerifiableShuffleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): VerifiableShuffleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<VerifiableShuffleComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<VerifiableShuffleComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type VerifiableShuffleComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type VerifiableShuffleComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
